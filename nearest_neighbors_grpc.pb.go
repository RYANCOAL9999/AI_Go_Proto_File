// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NeighborsServiceClient is the client API for NeighborsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeighborsServiceClient interface {
	// Send a Nearest Neighbors
	NearestNeighborsEvent(ctx context.Context, in *NearestNeighborsRequest, opts ...grpc.CallOption) (*NearestNeighborsReply, error)
	// Send a KD Tree
	KDTreeEvent(ctx context.Context, in *KDTreeRequest, opts ...grpc.CallOption) (*KDTreeReply, error)
	// Send a Nearest Centroid
	NearestCentroidEvent(ctx context.Context, in *NearestCentroidRequest, opts ...grpc.CallOption) (*NearestCentroidReply, error)
}

type neighborsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNeighborsServiceClient(cc grpc.ClientConnInterface) NeighborsServiceClient {
	return &neighborsServiceClient{cc}
}

func (c *neighborsServiceClient) NearestNeighborsEvent(ctx context.Context, in *NearestNeighborsRequest, opts ...grpc.CallOption) (*NearestNeighborsReply, error) {
	out := new(NearestNeighborsReply)
	err := c.cc.Invoke(ctx, "/AIProto.NeighborsService/NearestNeighborsEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborsServiceClient) KDTreeEvent(ctx context.Context, in *KDTreeRequest, opts ...grpc.CallOption) (*KDTreeReply, error) {
	out := new(KDTreeReply)
	err := c.cc.Invoke(ctx, "/AIProto.NeighborsService/KDTreeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborsServiceClient) NearestCentroidEvent(ctx context.Context, in *NearestCentroidRequest, opts ...grpc.CallOption) (*NearestCentroidReply, error) {
	out := new(NearestCentroidReply)
	err := c.cc.Invoke(ctx, "/AIProto.NeighborsService/NearestCentroidEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeighborsServiceServer is the server API for NeighborsService service.
// All implementations must embed UnimplementedNeighborsServiceServer
// for forward compatibility
type NeighborsServiceServer interface {
	// Send a Nearest Neighbors
	NearestNeighborsEvent(context.Context, *NearestNeighborsRequest) (*NearestNeighborsReply, error)
	// Send a KD Tree
	KDTreeEvent(context.Context, *KDTreeRequest) (*KDTreeReply, error)
	// Send a Nearest Centroid
	NearestCentroidEvent(context.Context, *NearestCentroidRequest) (*NearestCentroidReply, error)
	mustEmbedUnimplementedNeighborsServiceServer()
}

// UnimplementedNeighborsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNeighborsServiceServer struct {
}

func (UnimplementedNeighborsServiceServer) NearestNeighborsEvent(context.Context, *NearestNeighborsRequest) (*NearestNeighborsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NearestNeighborsEvent not implemented")
}
func (UnimplementedNeighborsServiceServer) KDTreeEvent(context.Context, *KDTreeRequest) (*KDTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KDTreeEvent not implemented")
}
func (UnimplementedNeighborsServiceServer) NearestCentroidEvent(context.Context, *NearestCentroidRequest) (*NearestCentroidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NearestCentroidEvent not implemented")
}
func (UnimplementedNeighborsServiceServer) mustEmbedUnimplementedNeighborsServiceServer() {}

// UnsafeNeighborsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeighborsServiceServer will
// result in compilation errors.
type UnsafeNeighborsServiceServer interface {
	mustEmbedUnimplementedNeighborsServiceServer()
}

func RegisterNeighborsServiceServer(s grpc.ServiceRegistrar, srv NeighborsServiceServer) {
	s.RegisterService(&NeighborsService_ServiceDesc, srv)
}

func _NeighborsService_NearestNeighborsEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearestNeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborsServiceServer).NearestNeighborsEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.NeighborsService/NearestNeighborsEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborsServiceServer).NearestNeighborsEvent(ctx, req.(*NearestNeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeighborsService_KDTreeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KDTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborsServiceServer).KDTreeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.NeighborsService/KDTreeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborsServiceServer).KDTreeEvent(ctx, req.(*KDTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeighborsService_NearestCentroidEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearestCentroidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborsServiceServer).NearestCentroidEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.NeighborsService/NearestCentroidEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborsServiceServer).NearestCentroidEvent(ctx, req.(*NearestCentroidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NeighborsService_ServiceDesc is the grpc.ServiceDesc for NeighborsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeighborsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AIProto.NeighborsService",
	HandlerType: (*NeighborsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NearestNeighborsEvent",
			Handler:    _NeighborsService_NearestNeighborsEvent_Handler,
		},
		{
			MethodName: "KDTreeEvent",
			Handler:    _NeighborsService_KDTreeEvent_Handler,
		},
		{
			MethodName: "NearestCentroidEvent",
			Handler:    _NeighborsService_NearestCentroidEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nearest_neighbors.proto",
}
