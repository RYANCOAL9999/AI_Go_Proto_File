// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.4
// source: linear_expression.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Linear Regression kwargs with optional type.
type LinearRegressionkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FitIntercept *bool   `protobuf:"varint,1,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Copy_X       *bool   `protobuf:"varint,2,opt,name=copy_X,json=copyX,proto3,oneof" json:"copy_X,omitempty"`
	NJobs        *uint32 `protobuf:"varint,3,opt,name=n_jobs,json=nJobs,proto3,oneof" json:"n_jobs,omitempty"`
	Postive      *bool   `protobuf:"varint,4,opt,name=postive,proto3,oneof" json:"postive,omitempty"`
}

func (x *LinearRegressionkwargs) Reset() {
	*x = LinearRegressionkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRegressionkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRegressionkwargs) ProtoMessage() {}

func (x *LinearRegressionkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRegressionkwargs.ProtoReflect.Descriptor instead.
func (*LinearRegressionkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{0}
}

func (x *LinearRegressionkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *LinearRegressionkwargs) GetCopy_X() bool {
	if x != nil && x.Copy_X != nil {
		return *x.Copy_X
	}
	return false
}

func (x *LinearRegressionkwargs) GetNJobs() uint32 {
	if x != nil && x.NJobs != nil {
		return *x.NJobs
	}
	return 0
}

func (x *LinearRegressionkwargs) GetPostive() bool {
	if x != nil && x.Postive != nil {
		return *x.Postive
	}
	return false
}

// Ridge kwargs with optional type.
type LinearRidgekwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FitIntercept *bool      `protobuf:"varint,1,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Copy_X       *bool      `protobuf:"varint,2,opt,name=copy_X,json=copyX,proto3,oneof" json:"copy_X,omitempty"`
	MaxIter      *anypb.Any `protobuf:"bytes,3,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Tol          *float32   `protobuf:"fixed32,4,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	Solver       *Solver    `protobuf:"varint,5,opt,name=solver,proto3,enum=AIProto.Solver,oneof" json:"solver,omitempty"`
	Postive      *bool      `protobuf:"varint,6,opt,name=postive,proto3,oneof" json:"postive,omitempty"`
	RandomState  *anypb.Any `protobuf:"bytes,7,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
}

func (x *LinearRidgekwargs) Reset() {
	*x = LinearRidgekwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRidgekwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRidgekwargs) ProtoMessage() {}

func (x *LinearRidgekwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRidgekwargs.ProtoReflect.Descriptor instead.
func (*LinearRidgekwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{1}
}

func (x *LinearRidgekwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *LinearRidgekwargs) GetCopy_X() bool {
	if x != nil && x.Copy_X != nil {
		return *x.Copy_X
	}
	return false
}

func (x *LinearRidgekwargs) GetMaxIter() *anypb.Any {
	if x != nil {
		return x.MaxIter
	}
	return nil
}

func (x *LinearRidgekwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *LinearRidgekwargs) GetSolver() Solver {
	if x != nil && x.Solver != nil {
		return *x.Solver
	}
	return Solver_SOLVER_AUTO
}

func (x *LinearRidgekwargs) GetPostive() bool {
	if x != nil && x.Postive != nil {
		return *x.Postive
	}
	return false
}

func (x *LinearRidgekwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

// RidgeCV kwargs with optional type.
type LinearRidgeCVkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FitIntercept   *bool      `protobuf:"varint,1,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Scoring        *anypb.Any `protobuf:"bytes,2,opt,name=scoring,proto3,oneof" json:"scoring,omitempty"`
	Cv             *anypb.Any `protobuf:"bytes,3,opt,name=cv,proto3,oneof" json:"cv,omitempty"`
	GcvMode        *anypb.Any `protobuf:"bytes,4,opt,name=gcv_mode,json=gcvMode,proto3,oneof" json:"gcv_mode,omitempty"`
	StoreCvValues  *bool      `protobuf:"varint,5,opt,name=store_cv_values,json=storeCvValues,proto3,oneof" json:"store_cv_values,omitempty"`
	AlphaPerTarget *bool      `protobuf:"varint,6,opt,name=alpha_per_target,json=alphaPerTarget,proto3,oneof" json:"alpha_per_target,omitempty"`
}

func (x *LinearRidgeCVkwargs) Reset() {
	*x = LinearRidgeCVkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRidgeCVkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRidgeCVkwargs) ProtoMessage() {}

func (x *LinearRidgeCVkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRidgeCVkwargs.ProtoReflect.Descriptor instead.
func (*LinearRidgeCVkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{2}
}

func (x *LinearRidgeCVkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *LinearRidgeCVkwargs) GetScoring() *anypb.Any {
	if x != nil {
		return x.Scoring
	}
	return nil
}

func (x *LinearRidgeCVkwargs) GetCv() *anypb.Any {
	if x != nil {
		return x.Cv
	}
	return nil
}

func (x *LinearRidgeCVkwargs) GetGcvMode() *anypb.Any {
	if x != nil {
		return x.GcvMode
	}
	return nil
}

func (x *LinearRidgeCVkwargs) GetStoreCvValues() bool {
	if x != nil && x.StoreCvValues != nil {
		return *x.StoreCvValues
	}
	return false
}

func (x *LinearRidgeCVkwargs) GetAlphaPerTarget() bool {
	if x != nil && x.AlphaPerTarget != nil {
		return *x.AlphaPerTarget
	}
	return false
}

// Lasso kwargs with optional type.
type LassoExpressionkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FitIntercept *bool      `protobuf:"varint,1,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Precompute   *anypb.Any `protobuf:"bytes,2,opt,name=precompute,proto3,oneof" json:"precompute,omitempty"`
	Copy_X       *bool      `protobuf:"varint,3,opt,name=copy_X,json=copyX,proto3,oneof" json:"copy_X,omitempty"`
	MaxIter      *int32     `protobuf:"varint,4,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Tol          *float32   `protobuf:"fixed32,5,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	WarmStart    *bool      `protobuf:"varint,6,opt,name=warm_start,json=warmStart,proto3,oneof" json:"warm_start,omitempty"`
	Positive     *bool      `protobuf:"varint,7,opt,name=positive,proto3,oneof" json:"positive,omitempty"`
	RandomState  *anypb.Any `protobuf:"bytes,8,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	Selection    *Selection `protobuf:"varint,9,opt,name=selection,proto3,enum=AIProto.Selection,oneof" json:"selection,omitempty"`
}

func (x *LassoExpressionkwargs) Reset() {
	*x = LassoExpressionkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LassoExpressionkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LassoExpressionkwargs) ProtoMessage() {}

func (x *LassoExpressionkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LassoExpressionkwargs.ProtoReflect.Descriptor instead.
func (*LassoExpressionkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{3}
}

func (x *LassoExpressionkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *LassoExpressionkwargs) GetPrecompute() *anypb.Any {
	if x != nil {
		return x.Precompute
	}
	return nil
}

func (x *LassoExpressionkwargs) GetCopy_X() bool {
	if x != nil && x.Copy_X != nil {
		return *x.Copy_X
	}
	return false
}

func (x *LassoExpressionkwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *LassoExpressionkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *LassoExpressionkwargs) GetWarmStart() bool {
	if x != nil && x.WarmStart != nil {
		return *x.WarmStart
	}
	return false
}

func (x *LassoExpressionkwargs) GetPositive() bool {
	if x != nil && x.Positive != nil {
		return *x.Positive
	}
	return false
}

func (x *LassoExpressionkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

func (x *LassoExpressionkwargs) GetSelection() Selection {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return Selection_SELECTION_CYCLIC
}

// Lasso Lars kwargs with optional type.
type LassoLarsLassoExpressionkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FitIntercept *bool      `protobuf:"varint,1,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Verbose      *anypb.Any `protobuf:"bytes,2,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	Normalize    *anypb.Any `protobuf:"bytes,3,opt,name=normalize,proto3,oneof" json:"normalize,omitempty"`
	Precompute   *string    `protobuf:"bytes,4,opt,name=precompute,proto3,oneof" json:"precompute,omitempty"`
	MaxIter      *int32     `protobuf:"varint,5,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Eps          *float32   `protobuf:"fixed32,6,opt,name=eps,proto3,oneof" json:"eps,omitempty"`
	Copy_X       *bool      `protobuf:"varint,7,opt,name=copy_X,json=copyX,proto3,oneof" json:"copy_X,omitempty"`
	FitPath      *bool      `protobuf:"varint,8,opt,name=fit_path,json=fitPath,proto3,oneof" json:"fit_path,omitempty"`
	Positive     *bool      `protobuf:"varint,9,opt,name=positive,proto3,oneof" json:"positive,omitempty"`
	Jitter       *float32   `protobuf:"fixed32,10,opt,name=jitter,proto3,oneof" json:"jitter,omitempty"`
	RandomState  *anypb.Any `protobuf:"bytes,11,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
}

func (x *LassoLarsLassoExpressionkwargs) Reset() {
	*x = LassoLarsLassoExpressionkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LassoLarsLassoExpressionkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LassoLarsLassoExpressionkwargs) ProtoMessage() {}

func (x *LassoLarsLassoExpressionkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LassoLarsLassoExpressionkwargs.ProtoReflect.Descriptor instead.
func (*LassoLarsLassoExpressionkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{4}
}

func (x *LassoLarsLassoExpressionkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *LassoLarsLassoExpressionkwargs) GetVerbose() *anypb.Any {
	if x != nil {
		return x.Verbose
	}
	return nil
}

func (x *LassoLarsLassoExpressionkwargs) GetNormalize() *anypb.Any {
	if x != nil {
		return x.Normalize
	}
	return nil
}

func (x *LassoLarsLassoExpressionkwargs) GetPrecompute() string {
	if x != nil && x.Precompute != nil {
		return *x.Precompute
	}
	return ""
}

func (x *LassoLarsLassoExpressionkwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *LassoLarsLassoExpressionkwargs) GetEps() float32 {
	if x != nil && x.Eps != nil {
		return *x.Eps
	}
	return 0
}

func (x *LassoLarsLassoExpressionkwargs) GetCopy_X() bool {
	if x != nil && x.Copy_X != nil {
		return *x.Copy_X
	}
	return false
}

func (x *LassoLarsLassoExpressionkwargs) GetFitPath() bool {
	if x != nil && x.FitPath != nil {
		return *x.FitPath
	}
	return false
}

func (x *LassoLarsLassoExpressionkwargs) GetPositive() bool {
	if x != nil && x.Positive != nil {
		return *x.Positive
	}
	return false
}

func (x *LassoLarsLassoExpressionkwargs) GetJitter() float32 {
	if x != nil && x.Jitter != nil {
		return *x.Jitter
	}
	return 0
}

func (x *LassoLarsLassoExpressionkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

// Bayesian Ridge kwargs with optional type.
type BayesianRidgekwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxIter      *int32   `protobuf:"varint,1,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Tol          *float32 `protobuf:"fixed32,2,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	Alpha_1      *float32 `protobuf:"fixed32,3,opt,name=alpha_1,json=alpha1,proto3,oneof" json:"alpha_1,omitempty"`
	Alpha_2      *float32 `protobuf:"fixed32,4,opt,name=alpha_2,json=alpha2,proto3,oneof" json:"alpha_2,omitempty"`
	Lambda_1     *float32 `protobuf:"fixed32,5,opt,name=lambda_1,json=lambda1,proto3,oneof" json:"lambda_1,omitempty"`
	Lambda_2     *float32 `protobuf:"fixed32,6,opt,name=lambda_2,json=lambda2,proto3,oneof" json:"lambda_2,omitempty"`
	AlphaInit    *float32 `protobuf:"fixed32,7,opt,name=alpha_init,json=alphaInit,proto3,oneof" json:"alpha_init,omitempty"`
	LambdaInit   *float32 `protobuf:"fixed32,8,opt,name=lambda_init,json=lambdaInit,proto3,oneof" json:"lambda_init,omitempty"`
	ComputeScore *bool    `protobuf:"varint,9,opt,name=compute_score,json=computeScore,proto3,oneof" json:"compute_score,omitempty"`
	FitIntercept *bool    `protobuf:"varint,10,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Copy_X       *bool    `protobuf:"varint,11,opt,name=copy_X,json=copyX,proto3,oneof" json:"copy_X,omitempty"`
	Verbose      *bool    `protobuf:"varint,12,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	NIter        *int32   `protobuf:"varint,13,opt,name=n_iter,json=nIter,proto3,oneof" json:"n_iter,omitempty"`
}

func (x *BayesianRidgekwargs) Reset() {
	*x = BayesianRidgekwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BayesianRidgekwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BayesianRidgekwargs) ProtoMessage() {}

func (x *BayesianRidgekwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BayesianRidgekwargs.ProtoReflect.Descriptor instead.
func (*BayesianRidgekwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{5}
}

func (x *BayesianRidgekwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *BayesianRidgekwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *BayesianRidgekwargs) GetAlpha_1() float32 {
	if x != nil && x.Alpha_1 != nil {
		return *x.Alpha_1
	}
	return 0
}

func (x *BayesianRidgekwargs) GetAlpha_2() float32 {
	if x != nil && x.Alpha_2 != nil {
		return *x.Alpha_2
	}
	return 0
}

func (x *BayesianRidgekwargs) GetLambda_1() float32 {
	if x != nil && x.Lambda_1 != nil {
		return *x.Lambda_1
	}
	return 0
}

func (x *BayesianRidgekwargs) GetLambda_2() float32 {
	if x != nil && x.Lambda_2 != nil {
		return *x.Lambda_2
	}
	return 0
}

func (x *BayesianRidgekwargs) GetAlphaInit() float32 {
	if x != nil && x.AlphaInit != nil {
		return *x.AlphaInit
	}
	return 0
}

func (x *BayesianRidgekwargs) GetLambdaInit() float32 {
	if x != nil && x.LambdaInit != nil {
		return *x.LambdaInit
	}
	return 0
}

func (x *BayesianRidgekwargs) GetComputeScore() bool {
	if x != nil && x.ComputeScore != nil {
		return *x.ComputeScore
	}
	return false
}

func (x *BayesianRidgekwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *BayesianRidgekwargs) GetCopy_X() bool {
	if x != nil && x.Copy_X != nil {
		return *x.Copy_X
	}
	return false
}

func (x *BayesianRidgekwargs) GetVerbose() bool {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return false
}

func (x *BayesianRidgekwargs) GetNIter() int32 {
	if x != nil && x.NIter != nil {
		return *x.NIter
	}
	return 0
}

// Tweedie Regressor kwargs with optional type.
type TweedieRegressorkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power        *float32 `protobuf:"fixed32,1,opt,name=power,proto3,oneof" json:"power,omitempty"`
	Alpha        *float32 `protobuf:"fixed32,2,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"`
	FitIntercept *bool    `protobuf:"varint,3,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Link         *Link    `protobuf:"varint,4,opt,name=link,proto3,enum=AIProto.Link,oneof" json:"link,omitempty"`
	Solver       *Solver  `protobuf:"varint,5,opt,name=solver,proto3,enum=AIProto.Solver,oneof" json:"solver,omitempty"`
	MaxIter      *int32   `protobuf:"varint,6,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Tol          *float32 `protobuf:"fixed32,7,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	Start        *bool    `protobuf:"varint,8,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Verbose      *int32   `protobuf:"varint,9,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
}

func (x *TweedieRegressorkwargs) Reset() {
	*x = TweedieRegressorkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweedieRegressorkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweedieRegressorkwargs) ProtoMessage() {}

func (x *TweedieRegressorkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweedieRegressorkwargs.ProtoReflect.Descriptor instead.
func (*TweedieRegressorkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{6}
}

func (x *TweedieRegressorkwargs) GetPower() float32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *TweedieRegressorkwargs) GetAlpha() float32 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

func (x *TweedieRegressorkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *TweedieRegressorkwargs) GetLink() Link {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return Link_LINK_AUTO
}

func (x *TweedieRegressorkwargs) GetSolver() Solver {
	if x != nil && x.Solver != nil {
		return *x.Solver
	}
	return Solver_SOLVER_AUTO
}

func (x *TweedieRegressorkwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *TweedieRegressorkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *TweedieRegressorkwargs) GetStart() bool {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return false
}

func (x *TweedieRegressorkwargs) GetVerbose() int32 {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return 0
}

// SGD Classifier kwargs with optional type.
type SGDClassifierkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loss               *Loss      `protobuf:"varint,1,opt,name=loss,proto3,enum=AIProto.Loss,oneof" json:"loss,omitempty"`
	Penalty            *Penalty   `protobuf:"varint,2,opt,name=penalty,proto3,enum=AIProto.Penalty,oneof" json:"penalty,omitempty"`
	Aplha              *float32   `protobuf:"fixed32,3,opt,name=aplha,proto3,oneof" json:"aplha,omitempty"`
	L1Ratio            *float32   `protobuf:"fixed32,4,opt,name=l1_ratio,json=l1Ratio,proto3,oneof" json:"l1_ratio,omitempty"`
	FitIntercept       *bool      `protobuf:"varint,5,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	MaxIter            *int32     `protobuf:"varint,6,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Tol                *float32   `protobuf:"fixed32,7,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	Shuffle            *bool      `protobuf:"varint,8,opt,name=shuffle,proto3,oneof" json:"shuffle,omitempty"`
	Verbose            *int32     `protobuf:"varint,9,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	Epsilon            *float32   `protobuf:"fixed32,10,opt,name=epsilon,proto3,oneof" json:"epsilon,omitempty"`
	NJobs              *anypb.Any `protobuf:"bytes,11,opt,name=n_jobs,json=nJobs,proto3,oneof" json:"n_jobs,omitempty"`
	RandomState        *anypb.Any `protobuf:"bytes,12,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	LearningRate       *string    `protobuf:"bytes,13,opt,name=learning_rate,json=learningRate,proto3,oneof" json:"learning_rate,omitempty"`
	Eta0               *float32   `protobuf:"fixed32,14,opt,name=eta0,proto3,oneof" json:"eta0,omitempty"`
	PowerT             *float32   `protobuf:"fixed32,15,opt,name=power_t,json=powerT,proto3,oneof" json:"power_t,omitempty"`
	EarlyStopping      *bool      `protobuf:"varint,16,opt,name=early_stopping,json=earlyStopping,proto3,oneof" json:"early_stopping,omitempty"`
	ValidationFraction *float32   `protobuf:"fixed32,17,opt,name=validation_fraction,json=validationFraction,proto3,oneof" json:"validation_fraction,omitempty"`
	NIterNoChange      *int32     `protobuf:"varint,18,opt,name=n_iter_no_change,json=nIterNoChange,proto3,oneof" json:"n_iter_no_change,omitempty"`
	ClassWeight        *anypb.Any `protobuf:"bytes,19,opt,name=class_weight,json=classWeight,proto3,oneof" json:"class_weight,omitempty"`
	WarmStart          *bool      `protobuf:"varint,20,opt,name=warm_start,json=warmStart,proto3,oneof" json:"warm_start,omitempty"`
	Average            *anypb.Any `protobuf:"bytes,21,opt,name=average,proto3,oneof" json:"average,omitempty"`
}

func (x *SGDClassifierkwargs) Reset() {
	*x = SGDClassifierkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGDClassifierkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGDClassifierkwargs) ProtoMessage() {}

func (x *SGDClassifierkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGDClassifierkwargs.ProtoReflect.Descriptor instead.
func (*SGDClassifierkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{7}
}

func (x *SGDClassifierkwargs) GetLoss() Loss {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return Loss_LOSS_HINGE
}

func (x *SGDClassifierkwargs) GetPenalty() Penalty {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return Penalty_PENALTY_L2
}

func (x *SGDClassifierkwargs) GetAplha() float32 {
	if x != nil && x.Aplha != nil {
		return *x.Aplha
	}
	return 0
}

func (x *SGDClassifierkwargs) GetL1Ratio() float32 {
	if x != nil && x.L1Ratio != nil {
		return *x.L1Ratio
	}
	return 0
}

func (x *SGDClassifierkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *SGDClassifierkwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *SGDClassifierkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *SGDClassifierkwargs) GetShuffle() bool {
	if x != nil && x.Shuffle != nil {
		return *x.Shuffle
	}
	return false
}

func (x *SGDClassifierkwargs) GetVerbose() int32 {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return 0
}

func (x *SGDClassifierkwargs) GetEpsilon() float32 {
	if x != nil && x.Epsilon != nil {
		return *x.Epsilon
	}
	return 0
}

func (x *SGDClassifierkwargs) GetNJobs() *anypb.Any {
	if x != nil {
		return x.NJobs
	}
	return nil
}

func (x *SGDClassifierkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

func (x *SGDClassifierkwargs) GetLearningRate() string {
	if x != nil && x.LearningRate != nil {
		return *x.LearningRate
	}
	return ""
}

func (x *SGDClassifierkwargs) GetEta0() float32 {
	if x != nil && x.Eta0 != nil {
		return *x.Eta0
	}
	return 0
}

func (x *SGDClassifierkwargs) GetPowerT() float32 {
	if x != nil && x.PowerT != nil {
		return *x.PowerT
	}
	return 0
}

func (x *SGDClassifierkwargs) GetEarlyStopping() bool {
	if x != nil && x.EarlyStopping != nil {
		return *x.EarlyStopping
	}
	return false
}

func (x *SGDClassifierkwargs) GetValidationFraction() float32 {
	if x != nil && x.ValidationFraction != nil {
		return *x.ValidationFraction
	}
	return 0
}

func (x *SGDClassifierkwargs) GetNIterNoChange() int32 {
	if x != nil && x.NIterNoChange != nil {
		return *x.NIterNoChange
	}
	return 0
}

func (x *SGDClassifierkwargs) GetClassWeight() *anypb.Any {
	if x != nil {
		return x.ClassWeight
	}
	return nil
}

func (x *SGDClassifierkwargs) GetWarmStart() bool {
	if x != nil && x.WarmStart != nil {
		return *x.WarmStart
	}
	return false
}

func (x *SGDClassifierkwargs) GetAverage() *anypb.Any {
	if x != nil {
		return x.Average
	}
	return nil
}

// Linear SVC kwargs with optional type.
type LinearSVCkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Penalty          *Penalty     `protobuf:"varint,1,opt,name=penalty,proto3,enum=AIProto.Penalty,oneof" json:"penalty,omitempty"`
	Loss             *Loss        `protobuf:"varint,2,opt,name=loss,proto3,enum=AIProto.Loss,oneof" json:"loss,omitempty"`
	Dual             *bool        `protobuf:"varint,3,opt,name=dual,proto3,oneof" json:"dual,omitempty"`
	Tol              *float32     `protobuf:"fixed32,4,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	C                *float32     `protobuf:"fixed32,5,opt,name=C,proto3,oneof" json:"C,omitempty"`
	MultiClass       *Multi_Class `protobuf:"varint,6,opt,name=multi_class,json=multiClass,proto3,enum=AIProto.Multi_Class,oneof" json:"multi_class,omitempty"`
	FitIntercept     *bool        `protobuf:"varint,7,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	InterceptScaling *float32     `protobuf:"fixed32,8,opt,name=intercept_scaling,json=interceptScaling,proto3,oneof" json:"intercept_scaling,omitempty"`
	ClassWeight      *anypb.Any   `protobuf:"bytes,9,opt,name=class_weight,json=classWeight,proto3,oneof" json:"class_weight,omitempty"`
	Verbose          *int32       `protobuf:"varint,10,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	RandomState      *anypb.Any   `protobuf:"bytes,11,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	MaxIter          *int64       `protobuf:"varint,12,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
}

func (x *LinearSVCkwargs) Reset() {
	*x = LinearSVCkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearSVCkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearSVCkwargs) ProtoMessage() {}

func (x *LinearSVCkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearSVCkwargs.ProtoReflect.Descriptor instead.
func (*LinearSVCkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{8}
}

func (x *LinearSVCkwargs) GetPenalty() Penalty {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return Penalty_PENALTY_L2
}

func (x *LinearSVCkwargs) GetLoss() Loss {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return Loss_LOSS_HINGE
}

func (x *LinearSVCkwargs) GetDual() bool {
	if x != nil && x.Dual != nil {
		return *x.Dual
	}
	return false
}

func (x *LinearSVCkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *LinearSVCkwargs) GetC() float32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

func (x *LinearSVCkwargs) GetMultiClass() Multi_Class {
	if x != nil && x.MultiClass != nil {
		return *x.MultiClass
	}
	return Multi_Class_MULTI_CLASS_OVR
}

func (x *LinearSVCkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *LinearSVCkwargs) GetInterceptScaling() float32 {
	if x != nil && x.InterceptScaling != nil {
		return *x.InterceptScaling
	}
	return 0
}

func (x *LinearSVCkwargs) GetClassWeight() *anypb.Any {
	if x != nil {
		return x.ClassWeight
	}
	return nil
}

func (x *LinearSVCkwargs) GetVerbose() int32 {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return 0
}

func (x *LinearSVCkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

func (x *LinearSVCkwargs) GetMaxIter() int64 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

// Elastic Net kwargs with optional type.
type ElasticNetkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1Ratio      *float32 `protobuf:"fixed32,1,opt,name=l1_ratio,json=l1Ratio,proto3,oneof" json:"l1_ratio,omitempty"`
	FitIntercept *bool    `protobuf:"varint,2,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	Precompute   *float32 `protobuf:"fixed32,3,opt,name=precompute,proto3,oneof" json:"precompute,omitempty"`
	MaxIter      *int32   `protobuf:"varint,4,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Copy_X       *bool    `protobuf:"varint,5,opt,name=copy_X,json=copyX,proto3,oneof" json:"copy_X,omitempty"`
	Tol          *float32 `protobuf:"fixed32,6,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	WarmStart    *bool    `protobuf:"varint,7,opt,name=warm_start,json=warmStart,proto3,oneof" json:"warm_start,omitempty"`
	Positive     *bool    `protobuf:"varint,8,opt,name=positive,proto3,oneof" json:"positive,omitempty"`
	RandomState  *int32   `protobuf:"varint,9,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	Selection    *string  `protobuf:"bytes,10,opt,name=selection,proto3,oneof" json:"selection,omitempty"`
}

func (x *ElasticNetkwargs) Reset() {
	*x = ElasticNetkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticNetkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticNetkwargs) ProtoMessage() {}

func (x *ElasticNetkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticNetkwargs.ProtoReflect.Descriptor instead.
func (*ElasticNetkwargs) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{9}
}

func (x *ElasticNetkwargs) GetL1Ratio() float32 {
	if x != nil && x.L1Ratio != nil {
		return *x.L1Ratio
	}
	return 0
}

func (x *ElasticNetkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *ElasticNetkwargs) GetPrecompute() float32 {
	if x != nil && x.Precompute != nil {
		return *x.Precompute
	}
	return 0
}

func (x *ElasticNetkwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *ElasticNetkwargs) GetCopy_X() bool {
	if x != nil && x.Copy_X != nil {
		return *x.Copy_X
	}
	return false
}

func (x *ElasticNetkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *ElasticNetkwargs) GetWarmStart() bool {
	if x != nil && x.WarmStart != nil {
		return *x.WarmStart
	}
	return false
}

func (x *ElasticNetkwargs) GetPositive() bool {
	if x != nil && x.Positive != nil {
		return *x.Positive
	}
	return false
}

func (x *ElasticNetkwargs) GetRandomState() int32 {
	if x != nil && x.RandomState != nil {
		return *x.RandomState
	}
	return 0
}

func (x *ElasticNetkwargs) GetSelection() string {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return ""
}

// The request message containing the Linear Regression's Data.
type LinearRegressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any              `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any              `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any              `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any              `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key          string                  `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any              `protobuf:"bytes,7,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *LinearRegressionkwargs `protobuf:"bytes,8,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *LinearRegressionRequest) Reset() {
	*x = LinearRegressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRegressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRegressionRequest) ProtoMessage() {}

func (x *LinearRegressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRegressionRequest.ProtoReflect.Descriptor instead.
func (*LinearRegressionRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{10}
}

func (x *LinearRegressionRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *LinearRegressionRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *LinearRegressionRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *LinearRegressionRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *LinearRegressionRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LinearRegressionRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *LinearRegressionRequest) GetKwargs() *LinearRegressionkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Linear Regression.
type LinearRegressionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_   *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_      *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	Intercept_        *anypb.Any `protobuf:"bytes,3,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Singular_         *anypb.Any `protobuf:"bytes,4,opt,name=singular_,json=singular,proto3,oneof" json:"singular_,omitempty"`
	Rank_             *int32     `protobuf:"varint,5,opt,name=rank_,json=rank,proto3,oneof" json:"rank_,omitempty"`
	Coef_             *NDArray   `protobuf:"bytes,6,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
	Socre             *float32   `protobuf:"fixed32,7,opt,name=socre,proto3,oneof" json:"socre,omitempty"`
	Predict           *NDArray   `protobuf:"bytes,8,opt,name=predict,proto3,oneof" json:"predict,omitempty"`
	MeanAbsoluteError *float32   `protobuf:"fixed32,9,opt,name=meanAbsoluteError,proto3,oneof" json:"meanAbsoluteError,omitempty"`
}

func (x *LinearRegressionReply) Reset() {
	*x = LinearRegressionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRegressionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRegressionReply) ProtoMessage() {}

func (x *LinearRegressionReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRegressionReply.ProtoReflect.Descriptor instead.
func (*LinearRegressionReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{11}
}

func (x *LinearRegressionReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *LinearRegressionReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *LinearRegressionReply) GetIntercept_() *anypb.Any {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *LinearRegressionReply) GetSingular_() *anypb.Any {
	if x != nil {
		return x.Singular_
	}
	return nil
}

func (x *LinearRegressionReply) GetRank_() int32 {
	if x != nil && x.Rank_ != nil {
		return *x.Rank_
	}
	return 0
}

func (x *LinearRegressionReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

func (x *LinearRegressionReply) GetSocre() float32 {
	if x != nil && x.Socre != nil {
		return *x.Socre
	}
	return 0
}

func (x *LinearRegressionReply) GetPredict() *NDArray {
	if x != nil {
		return x.Predict
	}
	return nil
}

func (x *LinearRegressionReply) GetMeanAbsoluteError() float32 {
	if x != nil && x.MeanAbsoluteError != nil {
		return *x.MeanAbsoluteError
	}
	return 0
}

// The request message containing the Ridge's Data.
type LinearRidgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha        *anypb.Any         `protobuf:"bytes,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	XDropData    *anypb.Any         `protobuf:"bytes,2,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any         `protobuf:"bytes,3,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any         `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any         `protobuf:"bytes,5,opt,name=random,proto3" json:"random,omitempty"`
	Key          string             `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any         `protobuf:"bytes,7,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *LinearRidgekwargs `protobuf:"bytes,8,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *LinearRidgeRequest) Reset() {
	*x = LinearRidgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRidgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRidgeRequest) ProtoMessage() {}

func (x *LinearRidgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRidgeRequest.ProtoReflect.Descriptor instead.
func (*LinearRidgeRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{12}
}

func (x *LinearRidgeRequest) GetAlpha() *anypb.Any {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *LinearRidgeRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *LinearRidgeRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *LinearRidgeRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *LinearRidgeRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *LinearRidgeRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LinearRidgeRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *LinearRidgeRequest) GetKwargs() *LinearRidgekwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Ridge.
type LinearRidgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	NIter_          *anypb.Any `protobuf:"bytes,3,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	Intercept_      *anypb.Any `protobuf:"bytes,4,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,5,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
}

func (x *LinearRidgeReply) Reset() {
	*x = LinearRidgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRidgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRidgeReply) ProtoMessage() {}

func (x *LinearRidgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRidgeReply.ProtoReflect.Descriptor instead.
func (*LinearRidgeReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{13}
}

func (x *LinearRidgeReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *LinearRidgeReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *LinearRidgeReply) GetNIter_() *anypb.Any {
	if x != nil {
		return x.NIter_
	}
	return nil
}

func (x *LinearRidgeReply) GetIntercept_() *anypb.Any {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *LinearRidgeReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

// The request message containing the Ridge CV's Data.
type LinearRidgeCVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha        *anypb.Any           `protobuf:"bytes,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	XDropData    *anypb.Any           `protobuf:"bytes,2,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any           `protobuf:"bytes,3,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any           `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any           `protobuf:"bytes,5,opt,name=random,proto3" json:"random,omitempty"`
	Key          string               `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any           `protobuf:"bytes,7,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *LinearRidgeCVkwargs `protobuf:"bytes,8,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *LinearRidgeCVRequest) Reset() {
	*x = LinearRidgeCVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRidgeCVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRidgeCVRequest) ProtoMessage() {}

func (x *LinearRidgeCVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRidgeCVRequest.ProtoReflect.Descriptor instead.
func (*LinearRidgeCVRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{14}
}

func (x *LinearRidgeCVRequest) GetAlpha() *anypb.Any {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *LinearRidgeCVRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *LinearRidgeCVRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *LinearRidgeCVRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *LinearRidgeCVRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *LinearRidgeCVRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LinearRidgeCVRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *LinearRidgeCVRequest) GetKwargs() *LinearRidgeCVkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Ridge CV.
type LinearRidgeCVReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	BestScore_      *anypb.Any `protobuf:"bytes,3,opt,name=best_score_,json=bestScore,proto3,oneof" json:"best_score_,omitempty"`
	Alpha           *anypb.Any `protobuf:"bytes,4,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"`
	Intercept_      *anypb.Any `protobuf:"bytes,5,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,6,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
	CvValues_       *NDArray   `protobuf:"bytes,7,opt,name=cv_values_,json=cvValues,proto3,oneof" json:"cv_values_,omitempty"`
}

func (x *LinearRidgeCVReply) Reset() {
	*x = LinearRidgeCVReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRidgeCVReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRidgeCVReply) ProtoMessage() {}

func (x *LinearRidgeCVReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRidgeCVReply.ProtoReflect.Descriptor instead.
func (*LinearRidgeCVReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{15}
}

func (x *LinearRidgeCVReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *LinearRidgeCVReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *LinearRidgeCVReply) GetBestScore_() *anypb.Any {
	if x != nil {
		return x.BestScore_
	}
	return nil
}

func (x *LinearRidgeCVReply) GetAlpha() *anypb.Any {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *LinearRidgeCVReply) GetIntercept_() *anypb.Any {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *LinearRidgeCVReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

func (x *LinearRidgeCVReply) GetCvValues_() *NDArray {
	if x != nil {
		return x.CvValues_
	}
	return nil
}

// The request message containing the Lasso's Data.
type LassoExpressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha        float32                `protobuf:"fixed32,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	XDropData    *anypb.Any             `protobuf:"bytes,2,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any             `protobuf:"bytes,3,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any             `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any             `protobuf:"bytes,5,opt,name=random,proto3" json:"random,omitempty"`
	Key          string                 `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any             `protobuf:"bytes,7,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *LassoExpressionkwargs `protobuf:"bytes,8,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *LassoExpressionRequest) Reset() {
	*x = LassoExpressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LassoExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LassoExpressionRequest) ProtoMessage() {}

func (x *LassoExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LassoExpressionRequest.ProtoReflect.Descriptor instead.
func (*LassoExpressionRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{16}
}

func (x *LassoExpressionRequest) GetAlpha() float32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *LassoExpressionRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *LassoExpressionRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *LassoExpressionRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *LassoExpressionRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *LassoExpressionRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LassoExpressionRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *LassoExpressionRequest) GetKwargs() *LassoExpressionkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Lasso.
type LassoExpressionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	NIter_          *anypb.Any `protobuf:"bytes,3,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	Intercept_      *anypb.Any `protobuf:"bytes,4,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	SparseCoef_     *anypb.Any `protobuf:"bytes,5,opt,name=sparse_coef_,json=sparseCoef,proto3,oneof" json:"sparse_coef_,omitempty"`
	DualGap_        *anypb.Any `protobuf:"bytes,6,opt,name=dual_gap_,json=dualGap,proto3,oneof" json:"dual_gap_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,7,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
}

func (x *LassoExpressionReply) Reset() {
	*x = LassoExpressionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LassoExpressionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LassoExpressionReply) ProtoMessage() {}

func (x *LassoExpressionReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LassoExpressionReply.ProtoReflect.Descriptor instead.
func (*LassoExpressionReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{17}
}

func (x *LassoExpressionReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *LassoExpressionReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *LassoExpressionReply) GetNIter_() *anypb.Any {
	if x != nil {
		return x.NIter_
	}
	return nil
}

func (x *LassoExpressionReply) GetIntercept_() *anypb.Any {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *LassoExpressionReply) GetSparseCoef_() *anypb.Any {
	if x != nil {
		return x.SparseCoef_
	}
	return nil
}

func (x *LassoExpressionReply) GetDualGap_() *anypb.Any {
	if x != nil {
		return x.DualGap_
	}
	return nil
}

func (x *LassoExpressionReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

// The request message containing the Lasso Lars's Data.
type LassoLarsLassoExpressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha        float32                         `protobuf:"fixed32,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	XDropData    *anypb.Any                      `protobuf:"bytes,2,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any                      `protobuf:"bytes,3,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any                      `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any                      `protobuf:"bytes,5,opt,name=random,proto3" json:"random,omitempty"`
	Key          string                          `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any                      `protobuf:"bytes,7,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *LassoLarsLassoExpressionkwargs `protobuf:"bytes,8,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *LassoLarsLassoExpressionRequest) Reset() {
	*x = LassoLarsLassoExpressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LassoLarsLassoExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LassoLarsLassoExpressionRequest) ProtoMessage() {}

func (x *LassoLarsLassoExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LassoLarsLassoExpressionRequest.ProtoReflect.Descriptor instead.
func (*LassoLarsLassoExpressionRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{18}
}

func (x *LassoLarsLassoExpressionRequest) GetAlpha() float32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *LassoLarsLassoExpressionRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *LassoLarsLassoExpressionRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *LassoLarsLassoExpressionRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *LassoLarsLassoExpressionRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *LassoLarsLassoExpressionRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LassoLarsLassoExpressionRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *LassoLarsLassoExpressionRequest) GetKwargs() *LassoLarsLassoExpressionkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Lasso Lars.
type LassoLarsLassoExpressionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	NIter_          *anypb.Any `protobuf:"bytes,3,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,4,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
	CoefPath_       *anypb.Any `protobuf:"bytes,5,opt,name=coef_path_,json=coefPath,proto3,oneof" json:"coef_path_,omitempty"`
	Active_         *anypb.Any `protobuf:"bytes,6,opt,name=active_,json=active,proto3,oneof" json:"active_,omitempty"`
	Alphas_         *anypb.Any `protobuf:"bytes,7,opt,name=alphas_,json=alphas,proto3,oneof" json:"alphas_,omitempty"`
}

func (x *LassoLarsLassoExpressionReply) Reset() {
	*x = LassoLarsLassoExpressionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LassoLarsLassoExpressionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LassoLarsLassoExpressionReply) ProtoMessage() {}

func (x *LassoLarsLassoExpressionReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LassoLarsLassoExpressionReply.ProtoReflect.Descriptor instead.
func (*LassoLarsLassoExpressionReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{19}
}

func (x *LassoLarsLassoExpressionReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *LassoLarsLassoExpressionReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *LassoLarsLassoExpressionReply) GetNIter_() *anypb.Any {
	if x != nil {
		return x.NIter_
	}
	return nil
}

func (x *LassoLarsLassoExpressionReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

func (x *LassoLarsLassoExpressionReply) GetCoefPath_() *anypb.Any {
	if x != nil {
		return x.CoefPath_
	}
	return nil
}

func (x *LassoLarsLassoExpressionReply) GetActive_() *anypb.Any {
	if x != nil {
		return x.Active_
	}
	return nil
}

func (x *LassoLarsLassoExpressionReply) GetAlphas_() *anypb.Any {
	if x != nil {
		return x.Alphas_
	}
	return nil
}

// The request message containing the Bayesian Ridge's Data.
type BayesianRidgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any           `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any           `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any           `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any           `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key          string               `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any           `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *BayesianRidgekwargs `protobuf:"bytes,7,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *BayesianRidgeRequest) Reset() {
	*x = BayesianRidgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BayesianRidgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BayesianRidgeRequest) ProtoMessage() {}

func (x *BayesianRidgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BayesianRidgeRequest.ProtoReflect.Descriptor instead.
func (*BayesianRidgeRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{20}
}

func (x *BayesianRidgeRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *BayesianRidgeRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *BayesianRidgeRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *BayesianRidgeRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *BayesianRidgeRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BayesianRidgeRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *BayesianRidgeRequest) GetKwargs() *BayesianRidgekwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Bayesian Ridge.
type BayesianRidgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	XScale_         *NDArray   `protobuf:"bytes,3,opt,name=x_scale_,json=xScale,proto3,oneof" json:"x_scale_,omitempty"`
	XOffset_        *NDArray   `protobuf:"bytes,4,opt,name=x_offset_,json=xOffset,proto3,oneof" json:"x_offset_,omitempty"`
	NIter_          *int32     `protobuf:"varint,5,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	Score_          *anypb.Any `protobuf:"bytes,6,opt,name=score_,json=score,proto3,oneof" json:"score_,omitempty"`
	Simga_          *anypb.Any `protobuf:"bytes,7,opt,name=simga_,json=simga,proto3,oneof" json:"simga_,omitempty"`
	Lambda_         *float32   `protobuf:"fixed32,8,opt,name=lambda_,json=lambda,proto3,oneof" json:"lambda_,omitempty"`
	Alpha_          *float32   `protobuf:"fixed32,9,opt,name=alpha_,json=alpha,proto3,oneof" json:"alpha_,omitempty"`
	Intercept_      *float32   `protobuf:"fixed32,10,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,11,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
}

func (x *BayesianRidgeReply) Reset() {
	*x = BayesianRidgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BayesianRidgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BayesianRidgeReply) ProtoMessage() {}

func (x *BayesianRidgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BayesianRidgeReply.ProtoReflect.Descriptor instead.
func (*BayesianRidgeReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{21}
}

func (x *BayesianRidgeReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *BayesianRidgeReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *BayesianRidgeReply) GetXScale_() *NDArray {
	if x != nil {
		return x.XScale_
	}
	return nil
}

func (x *BayesianRidgeReply) GetXOffset_() *NDArray {
	if x != nil {
		return x.XOffset_
	}
	return nil
}

func (x *BayesianRidgeReply) GetNIter_() int32 {
	if x != nil && x.NIter_ != nil {
		return *x.NIter_
	}
	return 0
}

func (x *BayesianRidgeReply) GetScore_() *anypb.Any {
	if x != nil {
		return x.Score_
	}
	return nil
}

func (x *BayesianRidgeReply) GetSimga_() *anypb.Any {
	if x != nil {
		return x.Simga_
	}
	return nil
}

func (x *BayesianRidgeReply) GetLambda_() float32 {
	if x != nil && x.Lambda_ != nil {
		return *x.Lambda_
	}
	return 0
}

func (x *BayesianRidgeReply) GetAlpha_() float32 {
	if x != nil && x.Alpha_ != nil {
		return *x.Alpha_
	}
	return 0
}

func (x *BayesianRidgeReply) GetIntercept_() float32 {
	if x != nil && x.Intercept_ != nil {
		return *x.Intercept_
	}
	return 0
}

func (x *BayesianRidgeReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

// The request message containing the Tweedie Regressor's Data.
type TweedieRegressorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any              `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any              `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any              `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any              `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key          string                  `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any              `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *TweedieRegressorkwargs `protobuf:"bytes,7,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *TweedieRegressorRequest) Reset() {
	*x = TweedieRegressorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweedieRegressorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweedieRegressorRequest) ProtoMessage() {}

func (x *TweedieRegressorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweedieRegressorRequest.ProtoReflect.Descriptor instead.
func (*TweedieRegressorRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{22}
}

func (x *TweedieRegressorRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *TweedieRegressorRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *TweedieRegressorRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *TweedieRegressorRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *TweedieRegressorRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TweedieRegressorRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *TweedieRegressorRequest) GetKwargs() *TweedieRegressorkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Tweedie Regressor.
type TweedieRegressorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32   `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	NIter_          *int32   `protobuf:"varint,3,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	Intercept_      *float32 `protobuf:"fixed32,4,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray `protobuf:"bytes,5,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
}

func (x *TweedieRegressorReply) Reset() {
	*x = TweedieRegressorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweedieRegressorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweedieRegressorReply) ProtoMessage() {}

func (x *TweedieRegressorReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweedieRegressorReply.ProtoReflect.Descriptor instead.
func (*TweedieRegressorReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{23}
}

func (x *TweedieRegressorReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *TweedieRegressorReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *TweedieRegressorReply) GetNIter_() int32 {
	if x != nil && x.NIter_ != nil {
		return *x.NIter_
	}
	return 0
}

func (x *TweedieRegressorReply) GetIntercept_() float32 {
	if x != nil && x.Intercept_ != nil {
		return *x.Intercept_
	}
	return 0
}

func (x *TweedieRegressorReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

// The request message containing the SGD Classifier's Data.
type SGDClassifierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any           `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any           `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any           `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any           `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key          string               `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any           `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *SGDClassifierkwargs `protobuf:"bytes,7,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *SGDClassifierRequest) Reset() {
	*x = SGDClassifierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGDClassifierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGDClassifierRequest) ProtoMessage() {}

func (x *SGDClassifierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGDClassifierRequest.ProtoReflect.Descriptor instead.
func (*SGDClassifierRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{24}
}

func (x *SGDClassifierRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *SGDClassifierRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *SGDClassifierRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *SGDClassifierRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *SGDClassifierRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SGDClassifierRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *SGDClassifierRequest) GetKwargs() *SGDClassifierkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the SGD Classifier.
type SGDClassifierReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	T_              *int32     `protobuf:"varint,3,opt,name=t_,json=t,proto3,oneof" json:"t_,omitempty"`
	Classes_        *NDArray   `protobuf:"bytes,4,opt,name=classes_,json=classes,proto3,oneof" json:"classes_,omitempty"`
	LossFunction_   *anypb.Any `protobuf:"bytes,5,opt,name=loss_function_,json=lossFunction,proto3,oneof" json:"loss_function_,omitempty"`
	Intercept_      *NDArray   `protobuf:"bytes,6,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,7,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
}

func (x *SGDClassifierReply) Reset() {
	*x = SGDClassifierReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGDClassifierReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGDClassifierReply) ProtoMessage() {}

func (x *SGDClassifierReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGDClassifierReply.ProtoReflect.Descriptor instead.
func (*SGDClassifierReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{25}
}

func (x *SGDClassifierReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *SGDClassifierReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *SGDClassifierReply) GetT_() int32 {
	if x != nil && x.T_ != nil {
		return *x.T_
	}
	return 0
}

func (x *SGDClassifierReply) GetClasses_() *NDArray {
	if x != nil {
		return x.Classes_
	}
	return nil
}

func (x *SGDClassifierReply) GetLossFunction_() *anypb.Any {
	if x != nil {
		return x.LossFunction_
	}
	return nil
}

func (x *SGDClassifierReply) GetIntercept_() *NDArray {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *SGDClassifierReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

// The request message containing the Elastic Net's Data.
type ElasticNetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alpha        float32           `protobuf:"fixed32,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	XDropData    *anypb.Any        `protobuf:"bytes,2,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any        `protobuf:"bytes,3,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any        `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any        `protobuf:"bytes,5,opt,name=random,proto3" json:"random,omitempty"`
	Key          string            `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any        `protobuf:"bytes,7,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *ElasticNetkwargs `protobuf:"bytes,8,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *ElasticNetRequest) Reset() {
	*x = ElasticNetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticNetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticNetRequest) ProtoMessage() {}

func (x *ElasticNetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticNetRequest.ProtoReflect.Descriptor instead.
func (*ElasticNetRequest) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{26}
}

func (x *ElasticNetRequest) GetAlpha() float32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *ElasticNetRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *ElasticNetRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *ElasticNetRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ElasticNetRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *ElasticNetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ElasticNetRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *ElasticNetRequest) GetKwargs() *ElasticNetkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Elastic Net.
type ElasticNetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray   `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    int32      `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3" json:"n_features_in_,omitempty"`
	DualGap_        *anypb.Any `protobuf:"bytes,3,opt,name=dual_gap_,json=dualGap,proto3" json:"dual_gap_,omitempty"`
	NIter_          []int32    `protobuf:"varint,4,rep,packed,name=n_iter_,json=nIter,proto3" json:"n_iter_,omitempty"`
	Intercept_      *anypb.Any `protobuf:"bytes,5,opt,name=intercept_,json=intercept,proto3" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,6,opt,name=coef_,json=coef,proto3" json:"coef_,omitempty"`
}

func (x *ElasticNetReply) Reset() {
	*x = ElasticNetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_linear_expression_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticNetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticNetReply) ProtoMessage() {}

func (x *ElasticNetReply) ProtoReflect() protoreflect.Message {
	mi := &file_linear_expression_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticNetReply.ProtoReflect.Descriptor instead.
func (*ElasticNetReply) Descriptor() ([]byte, []int) {
	return file_linear_expression_proto_rawDescGZIP(), []int{27}
}

func (x *ElasticNetReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *ElasticNetReply) GetNFeaturesIn_() int32 {
	if x != nil {
		return x.NFeaturesIn_
	}
	return 0
}

func (x *ElasticNetReply) GetDualGap_() *anypb.Any {
	if x != nil {
		return x.DualGap_
	}
	return nil
}

func (x *ElasticNetReply) GetNIter_() []int32 {
	if x != nil {
		return x.NIter_
	}
	return nil
}

func (x *ElasticNetReply) GetIntercept_() *anypb.Any {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *ElasticNetReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

var File_linear_expression_proto protoreflect.FileDescriptor

var file_linear_expression_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x69, 0x62, 0x2f, 0x6e, 0x70, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x69, 0x62, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x70, 0x79, 0x58, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x05, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x76, 0x65, 0x22, 0x8b,
	0x03, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x05, 0x63, 0x6f, 0x70, 0x79, 0x58, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52,
	0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x48, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x48, 0x06, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x03, 0x0a,
	0x13, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x02, 0x63, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x02, 0x63, 0x76, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x08, 0x67, 0x63, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x03, 0x52, 0x07, 0x67, 0x63, 0x76, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x76,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x50, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x63, 0x76, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x63, 0x76, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x76, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x15,
	0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f,
	0x70, 0x79, 0x5f, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x70, 0x79, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x05, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x07,
	0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x70,
	0x79, 0x5f, 0x58, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x72,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x04, 0x0a, 0x1e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c, 0x61, 0x72,
	0x73, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0c, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02,
	0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x05, 0x52, 0x03, 0x65, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f,
	0x70, 0x79, 0x5f, 0x58, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x05, 0x63, 0x6f,
	0x70, 0x79, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x07, 0x66, 0x69, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x48, 0x0a, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65,
	0x70, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xe9, 0x04, 0x0a, 0x13, 0x42, 0x61, 0x79, 0x65, 0x73, 0x69, 0x61, 0x6e,
	0x52, 0x69, 0x64, 0x67, 0x65, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x74, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x06, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0a, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x49, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x05,
	0x63, 0x6f, 0x70, 0x79, 0x58, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x5f, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x32,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x31, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x22,
	0xa4, 0x03, 0x0a, 0x16, 0x54, 0x77, 0x65, 0x65, 0x64, 0x69, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x48, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52,
	0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x85, 0x09, 0x0a, 0x13, 0x53, 0x47, 0x44, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x26,
	0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41,
	0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x6f, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x48, 0x01, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x6c, 0x68, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x05, 0x61, 0x70, 0x6c, 0x68, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x31, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x07, 0x6c, 0x31, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x03, 0x74, 0x6f, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x09, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x06, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x0a, 0x52, 0x05, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x0b,
	0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x30, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0d, 0x52, 0x04, 0x65, 0x74, 0x61, 0x30,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0e, 0x52, 0x06, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x0d, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x10, 0x52, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52,
	0x0d, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x12, 0x52,
	0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x14, 0x52, 0x07, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x70, 0x6c, 0x68, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x31, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x65, 0x74, 0x61, 0x30, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0x9f,
	0x05, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x56, 0x43, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x73, 0x73,
	0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64,
	0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x04, 0x64, 0x75, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x43,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x01, 0x43, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x07, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x0a, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x43, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x22, 0xed, 0x03, 0x0a, 0x10, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x6b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x31, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x31, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0c,
	0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x70, 0x79, 0x58, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52,
	0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x09, 0x77,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x31, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x58, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xfa, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b,
	0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79,
	0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc0, 0x04,
	0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x03, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x48, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x6f, 0x63, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x05, 0x73, 0x6f,
	0x63, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x07, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x6e, 0x41,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x08, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x65, 0x66, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x63, 0x72, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d,
	0x65, 0x61, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9c, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x6b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xe5, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x04,
	0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x22, 0xa0, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x34, 0x0a, 0x0b,
	0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79,
	0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf2, 0x03, 0x0a, 0x12, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x03, 0x52,
	0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0a, 0x63, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x06, 0x52, 0x08, 0x63, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x22,
	0x8e, 0x03, 0x0a, 0x16, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72,
	0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xfc, 0x03, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x05,
	0x6e, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x04,
	0x52, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x70, 0x5f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x05, 0x52, 0x07, 0x64, 0x75, 0x61, 0x6c,
	0x47, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x06, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x67, 0x61, 0x70, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x22,
	0xa0, 0x03, 0x0a, 0x1f, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c, 0x61, 0x72, 0x73, 0x4c, 0x61, 0x73,
	0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c,
	0x61, 0x72, 0x73, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x1d, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c, 0x61, 0x72, 0x73,
	0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x65,
	0x66, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x73, 0x5f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x06, 0x52, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x5f,
	0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x73, 0x5f, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x79, 0x65, 0x73,
	0x69, 0x61, 0x6e, 0x52, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x79, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x69, 0x64, 0x67, 0x65, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x85, 0x05,
	0x0a, 0x12, 0x42, 0x61, 0x79, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x08, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x02, 0x52, 0x06, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x09, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x03, 0x52, 0x07, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x67, 0x61, 0x5f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x06, 0x52, 0x05, 0x73, 0x69, 0x6d,
	0x67, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x0a, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x78, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x69, 0x6d, 0x67, 0x61, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x5f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x5f, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x54, 0x77, 0x65, 0x65, 0x64, 0x69,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44,
	0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x64, 0x69, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x15, 0x54, 0x77, 0x65, 0x65, 0x64, 0x69, 0x65, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x49, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65,
	0x66, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x04, 0x52, 0x04, 0x63, 0x6f,
	0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x65, 0x66, 0x5f, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x53, 0x47, 0x44, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b,
	0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79,
	0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x47, 0x44,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x12, 0x53,
	0x47, 0x44, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x02, 0x74, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x01, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f,
	0x65, 0x66, 0x5f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x06, 0x52, 0x04, 0x63,
	0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x74, 0x5f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x22,
	0x84, 0x03, 0x0a, 0x11, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x78,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79, 0x44,
	0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x0f, 0x45, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x11, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x30, 0x0a, 0x09,
	0x64, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x70, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x70, 0x12, 0x16,
	0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x63,
	0x6f, 0x65, 0x66, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x04, 0x63, 0x6f,
	0x65, 0x66, 0x32, 0xad, 0x06, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e,
	0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x64, 0x67, 0x65, 0x43, 0x56, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x41, 0x49,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x41,
	0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x1d, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c, 0x61, 0x72, 0x73, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c, 0x61,
	0x72, 0x73, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x4c, 0x61, 0x72, 0x73, 0x4c, 0x61, 0x73, 0x73,
	0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x42, 0x61, 0x79, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x69,
	0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x79, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x79, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x54, 0x77, 0x65, 0x65, 0x64, 0x69,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x64, 0x69,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x64, 0x69, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x53, 0x47, 0x44, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x47, 0x44, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x47, 0x44, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x45, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x4e, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x41, 0x49, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_linear_expression_proto_rawDescOnce sync.Once
	file_linear_expression_proto_rawDescData = file_linear_expression_proto_rawDesc
)

func file_linear_expression_proto_rawDescGZIP() []byte {
	file_linear_expression_proto_rawDescOnce.Do(func() {
		file_linear_expression_proto_rawDescData = protoimpl.X.CompressGZIP(file_linear_expression_proto_rawDescData)
	})
	return file_linear_expression_proto_rawDescData
}

var file_linear_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_linear_expression_proto_goTypes = []interface{}{
	(*LinearRegressionkwargs)(nil),          // 0: AIProto.LinearRegressionkwargs
	(*LinearRidgekwargs)(nil),               // 1: AIProto.LinearRidgekwargs
	(*LinearRidgeCVkwargs)(nil),             // 2: AIProto.LinearRidgeCVkwargs
	(*LassoExpressionkwargs)(nil),           // 3: AIProto.LassoExpressionkwargs
	(*LassoLarsLassoExpressionkwargs)(nil),  // 4: AIProto.LassoLarsLassoExpressionkwargs
	(*BayesianRidgekwargs)(nil),             // 5: AIProto.BayesianRidgekwargs
	(*TweedieRegressorkwargs)(nil),          // 6: AIProto.TweedieRegressorkwargs
	(*SGDClassifierkwargs)(nil),             // 7: AIProto.SGDClassifierkwargs
	(*LinearSVCkwargs)(nil),                 // 8: AIProto.LinearSVCkwargs
	(*ElasticNetkwargs)(nil),                // 9: AIProto.ElasticNetkwargs
	(*LinearRegressionRequest)(nil),         // 10: AIProto.LinearRegressionRequest
	(*LinearRegressionReply)(nil),           // 11: AIProto.LinearRegressionReply
	(*LinearRidgeRequest)(nil),              // 12: AIProto.LinearRidgeRequest
	(*LinearRidgeReply)(nil),                // 13: AIProto.LinearRidgeReply
	(*LinearRidgeCVRequest)(nil),            // 14: AIProto.LinearRidgeCVRequest
	(*LinearRidgeCVReply)(nil),              // 15: AIProto.LinearRidgeCVReply
	(*LassoExpressionRequest)(nil),          // 16: AIProto.LassoExpressionRequest
	(*LassoExpressionReply)(nil),            // 17: AIProto.LassoExpressionReply
	(*LassoLarsLassoExpressionRequest)(nil), // 18: AIProto.LassoLarsLassoExpressionRequest
	(*LassoLarsLassoExpressionReply)(nil),   // 19: AIProto.LassoLarsLassoExpressionReply
	(*BayesianRidgeRequest)(nil),            // 20: AIProto.BayesianRidgeRequest
	(*BayesianRidgeReply)(nil),              // 21: AIProto.BayesianRidgeReply
	(*TweedieRegressorRequest)(nil),         // 22: AIProto.TweedieRegressorRequest
	(*TweedieRegressorReply)(nil),           // 23: AIProto.TweedieRegressorReply
	(*SGDClassifierRequest)(nil),            // 24: AIProto.SGDClassifierRequest
	(*SGDClassifierReply)(nil),              // 25: AIProto.SGDClassifierReply
	(*ElasticNetRequest)(nil),               // 26: AIProto.ElasticNetRequest
	(*ElasticNetReply)(nil),                 // 27: AIProto.ElasticNetReply
	(*anypb.Any)(nil),                       // 28: google.protobuf.Any
	(Solver)(0),                             // 29: AIProto.Solver
	(Selection)(0),                          // 30: AIProto.Selection
	(Link)(0),                               // 31: AIProto.Link
	(Loss)(0),                               // 32: AIProto.Loss
	(Penalty)(0),                            // 33: AIProto.Penalty
	(Multi_Class)(0),                        // 34: AIProto.Multi_Class
	(*NDArray)(nil),                         // 35: AIProto.NDArray
}
var file_linear_expression_proto_depIdxs = []int32{
	28,  // 0: AIProto.LinearRidgekwargs.max_iter:type_name -> google.protobuf.Any
	29,  // 1: AIProto.LinearRidgekwargs.solver:type_name -> AIProto.Solver
	28,  // 2: AIProto.LinearRidgekwargs.random_state:type_name -> google.protobuf.Any
	28,  // 3: AIProto.LinearRidgeCVkwargs.scoring:type_name -> google.protobuf.Any
	28,  // 4: AIProto.LinearRidgeCVkwargs.cv:type_name -> google.protobuf.Any
	28,  // 5: AIProto.LinearRidgeCVkwargs.gcv_mode:type_name -> google.protobuf.Any
	28,  // 6: AIProto.LassoExpressionkwargs.precompute:type_name -> google.protobuf.Any
	28,  // 7: AIProto.LassoExpressionkwargs.random_state:type_name -> google.protobuf.Any
	30,  // 8: AIProto.LassoExpressionkwargs.selection:type_name -> AIProto.Selection
	28,  // 9: AIProto.LassoLarsLassoExpressionkwargs.verbose:type_name -> google.protobuf.Any
	28,  // 10: AIProto.LassoLarsLassoExpressionkwargs.normalize:type_name -> google.protobuf.Any
	28,  // 11: AIProto.LassoLarsLassoExpressionkwargs.random_state:type_name -> google.protobuf.Any
	31,  // 12: AIProto.TweedieRegressorkwargs.link:type_name -> AIProto.Link
	29,  // 13: AIProto.TweedieRegressorkwargs.solver:type_name -> AIProto.Solver
	32,  // 14: AIProto.SGDClassifierkwargs.loss:type_name -> AIProto.Loss
	33,  // 15: AIProto.SGDClassifierkwargs.penalty:type_name -> AIProto.Penalty
	28,  // 16: AIProto.SGDClassifierkwargs.n_jobs:type_name -> google.protobuf.Any
	28,  // 17: AIProto.SGDClassifierkwargs.random_state:type_name -> google.protobuf.Any
	28,  // 18: AIProto.SGDClassifierkwargs.class_weight:type_name -> google.protobuf.Any
	28,  // 19: AIProto.SGDClassifierkwargs.average:type_name -> google.protobuf.Any
	33,  // 20: AIProto.LinearSVCkwargs.penalty:type_name -> AIProto.Penalty
	32,  // 21: AIProto.LinearSVCkwargs.loss:type_name -> AIProto.Loss
	34,  // 22: AIProto.LinearSVCkwargs.multi_class:type_name -> AIProto.Multi_Class
	28,  // 23: AIProto.LinearSVCkwargs.class_weight:type_name -> google.protobuf.Any
	28,  // 24: AIProto.LinearSVCkwargs.random_state:type_name -> google.protobuf.Any
	28,  // 25: AIProto.LinearRegressionRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 26: AIProto.LinearRegressionRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 27: AIProto.LinearRegressionRequest.size:type_name -> google.protobuf.Any
	28,  // 28: AIProto.LinearRegressionRequest.random:type_name -> google.protobuf.Any
	28,  // 29: AIProto.LinearRegressionRequest.sample_weight:type_name -> google.protobuf.Any
	0,   // 30: AIProto.LinearRegressionRequest.kwargs:type_name -> AIProto.LinearRegressionkwargs
	35,  // 31: AIProto.LinearRegressionReply.feature_names_in_:type_name -> AIProto.NDArray
	28,  // 32: AIProto.LinearRegressionReply.intercept_:type_name -> google.protobuf.Any
	28,  // 33: AIProto.LinearRegressionReply.singular_:type_name -> google.protobuf.Any
	35,  // 34: AIProto.LinearRegressionReply.coef_:type_name -> AIProto.NDArray
	35,  // 35: AIProto.LinearRegressionReply.predict:type_name -> AIProto.NDArray
	28,  // 36: AIProto.LinearRidgeRequest.alpha:type_name -> google.protobuf.Any
	28,  // 37: AIProto.LinearRidgeRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 38: AIProto.LinearRidgeRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 39: AIProto.LinearRidgeRequest.size:type_name -> google.protobuf.Any
	28,  // 40: AIProto.LinearRidgeRequest.random:type_name -> google.protobuf.Any
	28,  // 41: AIProto.LinearRidgeRequest.sample_weight:type_name -> google.protobuf.Any
	1,   // 42: AIProto.LinearRidgeRequest.kwargs:type_name -> AIProto.LinearRidgekwargs
	35,  // 43: AIProto.LinearRidgeReply.feature_names_in_:type_name -> AIProto.NDArray
	28,  // 44: AIProto.LinearRidgeReply.n_iter_:type_name -> google.protobuf.Any
	28,  // 45: AIProto.LinearRidgeReply.intercept_:type_name -> google.protobuf.Any
	35,  // 46: AIProto.LinearRidgeReply.coef_:type_name -> AIProto.NDArray
	28,  // 47: AIProto.LinearRidgeCVRequest.alpha:type_name -> google.protobuf.Any
	28,  // 48: AIProto.LinearRidgeCVRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 49: AIProto.LinearRidgeCVRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 50: AIProto.LinearRidgeCVRequest.size:type_name -> google.protobuf.Any
	28,  // 51: AIProto.LinearRidgeCVRequest.random:type_name -> google.protobuf.Any
	28,  // 52: AIProto.LinearRidgeCVRequest.sample_weight:type_name -> google.protobuf.Any
	2,   // 53: AIProto.LinearRidgeCVRequest.kwargs:type_name -> AIProto.LinearRidgeCVkwargs
	35,  // 54: AIProto.LinearRidgeCVReply.feature_names_in_:type_name -> AIProto.NDArray
	28,  // 55: AIProto.LinearRidgeCVReply.best_score_:type_name -> google.protobuf.Any
	28,  // 56: AIProto.LinearRidgeCVReply.alpha:type_name -> google.protobuf.Any
	28,  // 57: AIProto.LinearRidgeCVReply.intercept_:type_name -> google.protobuf.Any
	35,  // 58: AIProto.LinearRidgeCVReply.coef_:type_name -> AIProto.NDArray
	35,  // 59: AIProto.LinearRidgeCVReply.cv_values_:type_name -> AIProto.NDArray
	28,  // 60: AIProto.LassoExpressionRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 61: AIProto.LassoExpressionRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 62: AIProto.LassoExpressionRequest.size:type_name -> google.protobuf.Any
	28,  // 63: AIProto.LassoExpressionRequest.random:type_name -> google.protobuf.Any
	28,  // 64: AIProto.LassoExpressionRequest.sample_weight:type_name -> google.protobuf.Any
	3,   // 65: AIProto.LassoExpressionRequest.kwargs:type_name -> AIProto.LassoExpressionkwargs
	35,  // 66: AIProto.LassoExpressionReply.feature_names_in_:type_name -> AIProto.NDArray
	28,  // 67: AIProto.LassoExpressionReply.n_iter_:type_name -> google.protobuf.Any
	28,  // 68: AIProto.LassoExpressionReply.intercept_:type_name -> google.protobuf.Any
	28,  // 69: AIProto.LassoExpressionReply.sparse_coef_:type_name -> google.protobuf.Any
	28,  // 70: AIProto.LassoExpressionReply.dual_gap_:type_name -> google.protobuf.Any
	35,  // 71: AIProto.LassoExpressionReply.coef_:type_name -> AIProto.NDArray
	28,  // 72: AIProto.LassoLarsLassoExpressionRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 73: AIProto.LassoLarsLassoExpressionRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 74: AIProto.LassoLarsLassoExpressionRequest.size:type_name -> google.protobuf.Any
	28,  // 75: AIProto.LassoLarsLassoExpressionRequest.random:type_name -> google.protobuf.Any
	28,  // 76: AIProto.LassoLarsLassoExpressionRequest.sample_weight:type_name -> google.protobuf.Any
	4,   // 77: AIProto.LassoLarsLassoExpressionRequest.kwargs:type_name -> AIProto.LassoLarsLassoExpressionkwargs
	35,  // 78: AIProto.LassoLarsLassoExpressionReply.feature_names_in_:type_name -> AIProto.NDArray
	28,  // 79: AIProto.LassoLarsLassoExpressionReply.n_iter_:type_name -> google.protobuf.Any
	35,  // 80: AIProto.LassoLarsLassoExpressionReply.coef_:type_name -> AIProto.NDArray
	28,  // 81: AIProto.LassoLarsLassoExpressionReply.coef_path_:type_name -> google.protobuf.Any
	28,  // 82: AIProto.LassoLarsLassoExpressionReply.active_:type_name -> google.protobuf.Any
	28,  // 83: AIProto.LassoLarsLassoExpressionReply.alphas_:type_name -> google.protobuf.Any
	28,  // 84: AIProto.BayesianRidgeRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 85: AIProto.BayesianRidgeRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 86: AIProto.BayesianRidgeRequest.size:type_name -> google.protobuf.Any
	28,  // 87: AIProto.BayesianRidgeRequest.random:type_name -> google.protobuf.Any
	28,  // 88: AIProto.BayesianRidgeRequest.sample_weight:type_name -> google.protobuf.Any
	5,   // 89: AIProto.BayesianRidgeRequest.kwargs:type_name -> AIProto.BayesianRidgekwargs
	35,  // 90: AIProto.BayesianRidgeReply.feature_names_in_:type_name -> AIProto.NDArray
	35,  // 91: AIProto.BayesianRidgeReply.x_scale_:type_name -> AIProto.NDArray
	35,  // 92: AIProto.BayesianRidgeReply.x_offset_:type_name -> AIProto.NDArray
	28,  // 93: AIProto.BayesianRidgeReply.score_:type_name -> google.protobuf.Any
	28,  // 94: AIProto.BayesianRidgeReply.simga_:type_name -> google.protobuf.Any
	35,  // 95: AIProto.BayesianRidgeReply.coef_:type_name -> AIProto.NDArray
	28,  // 96: AIProto.TweedieRegressorRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 97: AIProto.TweedieRegressorRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 98: AIProto.TweedieRegressorRequest.size:type_name -> google.protobuf.Any
	28,  // 99: AIProto.TweedieRegressorRequest.random:type_name -> google.protobuf.Any
	28,  // 100: AIProto.TweedieRegressorRequest.sample_weight:type_name -> google.protobuf.Any
	6,   // 101: AIProto.TweedieRegressorRequest.kwargs:type_name -> AIProto.TweedieRegressorkwargs
	35,  // 102: AIProto.TweedieRegressorReply.feature_names_in_:type_name -> AIProto.NDArray
	35,  // 103: AIProto.TweedieRegressorReply.coef_:type_name -> AIProto.NDArray
	28,  // 104: AIProto.SGDClassifierRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 105: AIProto.SGDClassifierRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 106: AIProto.SGDClassifierRequest.size:type_name -> google.protobuf.Any
	28,  // 107: AIProto.SGDClassifierRequest.random:type_name -> google.protobuf.Any
	28,  // 108: AIProto.SGDClassifierRequest.sample_weight:type_name -> google.protobuf.Any
	7,   // 109: AIProto.SGDClassifierRequest.kwargs:type_name -> AIProto.SGDClassifierkwargs
	35,  // 110: AIProto.SGDClassifierReply.feature_names_in_:type_name -> AIProto.NDArray
	35,  // 111: AIProto.SGDClassifierReply.classes_:type_name -> AIProto.NDArray
	28,  // 112: AIProto.SGDClassifierReply.loss_function_:type_name -> google.protobuf.Any
	35,  // 113: AIProto.SGDClassifierReply.intercept_:type_name -> AIProto.NDArray
	35,  // 114: AIProto.SGDClassifierReply.coef_:type_name -> AIProto.NDArray
	28,  // 115: AIProto.ElasticNetRequest.x_drop_data:type_name -> google.protobuf.Any
	28,  // 116: AIProto.ElasticNetRequest.y_drop_data:type_name -> google.protobuf.Any
	28,  // 117: AIProto.ElasticNetRequest.size:type_name -> google.protobuf.Any
	28,  // 118: AIProto.ElasticNetRequest.random:type_name -> google.protobuf.Any
	28,  // 119: AIProto.ElasticNetRequest.sample_weight:type_name -> google.protobuf.Any
	9,   // 120: AIProto.ElasticNetRequest.kwargs:type_name -> AIProto.ElasticNetkwargs
	35,  // 121: AIProto.ElasticNetReply.feature_names_in_:type_name -> AIProto.NDArray
	28,  // 122: AIProto.ElasticNetReply.dual_gap_:type_name -> google.protobuf.Any
	28,  // 123: AIProto.ElasticNetReply.intercept_:type_name -> google.protobuf.Any
	35,  // 124: AIProto.ElasticNetReply.coef_:type_name -> AIProto.NDArray
	10,  // 125: AIProto.LinearService.LinearRegressionEvent:input_type -> AIProto.LinearRegressionRequest
	12,  // 126: AIProto.LinearService.LinearRidgeEvent:input_type -> AIProto.LinearRidgeRequest
	14,  // 127: AIProto.LinearService.LinearRidgeCVEvent:input_type -> AIProto.LinearRidgeCVRequest
	16,  // 128: AIProto.LinearService.LassoExpressionEvent:input_type -> AIProto.LassoExpressionRequest
	18,  // 129: AIProto.LinearService.LassoLarsLassoExpressionEvent:input_type -> AIProto.LassoLarsLassoExpressionRequest
	20,  // 130: AIProto.LinearService.BayesianRidgeEvent:input_type -> AIProto.BayesianRidgeRequest
	22,  // 131: AIProto.LinearService.TweedieRegressorEvent:input_type -> AIProto.TweedieRegressorRequest
	24,  // 132: AIProto.LinearService.SGDClassifierEvent:input_type -> AIProto.SGDClassifierRequest
	26,  // 133: AIProto.LinearService.ElasticNetEvent:input_type -> AIProto.ElasticNetRequest
	11,  // 134: AIProto.LinearService.LinearRegressionEvent:output_type -> AIProto.LinearRegressionReply
	13,  // 135: AIProto.LinearService.LinearRidgeEvent:output_type -> AIProto.LinearRidgeReply
	15,  // 136: AIProto.LinearService.LinearRidgeCVEvent:output_type -> AIProto.LinearRidgeCVReply
	17,  // 137: AIProto.LinearService.LassoExpressionEvent:output_type -> AIProto.LassoExpressionReply
	19,  // 138: AIProto.LinearService.LassoLarsLassoExpressionEvent:output_type -> AIProto.LassoLarsLassoExpressionReply
	21,  // 139: AIProto.LinearService.BayesianRidgeEvent:output_type -> AIProto.BayesianRidgeReply
	23,  // 140: AIProto.LinearService.TweedieRegressorEvent:output_type -> AIProto.TweedieRegressorReply
	25,  // 141: AIProto.LinearService.SGDClassifierEvent:output_type -> AIProto.SGDClassifierReply
	27,  // 142: AIProto.LinearService.ElasticNetEvent:output_type -> AIProto.ElasticNetReply
	134, // [134:143] is the sub-list for method output_type
	125, // [125:134] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_linear_expression_proto_init() }
func file_linear_expression_proto_init() {
	if File_linear_expression_proto != nil {
		return
	}
	file_lib_np_library_proto_init()
	file_lib_enum_expression_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_linear_expression_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRegressionkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRidgekwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRidgeCVkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LassoExpressionkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LassoLarsLassoExpressionkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BayesianRidgekwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweedieRegressorkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGDClassifierkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearSVCkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticNetkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRegressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRegressionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRidgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRidgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRidgeCVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRidgeCVReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LassoExpressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LassoExpressionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LassoLarsLassoExpressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LassoLarsLassoExpressionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BayesianRidgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BayesianRidgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweedieRegressorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweedieRegressorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGDClassifierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SGDClassifierReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticNetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_linear_expression_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticNetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_linear_expression_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_linear_expression_proto_msgTypes[26].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_linear_expression_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_linear_expression_proto_goTypes,
		DependencyIndexes: file_linear_expression_proto_depIdxs,
		MessageInfos:      file_linear_expression_proto_msgTypes,
	}.Build()
	File_linear_expression_proto = out.File
	file_linear_expression_proto_rawDesc = nil
	file_linear_expression_proto_goTypes = nil
	file_linear_expression_proto_depIdxs = nil
}
