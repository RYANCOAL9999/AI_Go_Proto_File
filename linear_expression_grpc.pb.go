// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinearServiceClient is the client API for LinearService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinearServiceClient interface {
	// Sends a Linear Regression
	LinearRegressionEvent(ctx context.Context, in *LinearRegressionRequest, opts ...grpc.CallOption) (*LinearRegressionReply, error)
	// Sends a Ridge
	LinearRidgeEvent(ctx context.Context, in *LinearRidgeRequest, opts ...grpc.CallOption) (*LinearRidgeReply, error)
	// Sends a Ridge CV
	LinearRidgeCVEvent(ctx context.Context, in *LinearRidgeCVRequest, opts ...grpc.CallOption) (*LinearRidgeCVReply, error)
	// Sends a Lasso
	LassoExpressionEvent(ctx context.Context, in *LassoExpressionRequest, opts ...grpc.CallOption) (*LassoExpressionReply, error)
	// Send a LassoLars
	LassoLarsLassoExpressionEvent(ctx context.Context, in *LassoLarsLassoExpressionRequest, opts ...grpc.CallOption) (*LassoLarsLassoExpressionReply, error)
	// Send a Bayesian Ridge
	BayesianRidgeEvent(ctx context.Context, in *BayesianRidgeRequest, opts ...grpc.CallOption) (*BayesianRidgeReply, error)
	// Send a Tweedie Regressor
	TweedieRegressorEvent(ctx context.Context, in *TweedieRegressorRequest, opts ...grpc.CallOption) (*TweedieRegressorReply, error)
	// Send a SGD Classifier
	SGDClassifierEvent(ctx context.Context, in *SGDClassifierRequest, opts ...grpc.CallOption) (*SGDClassifierReply, error)
	// Send a Elastic Net
	ElasticNetEvent(ctx context.Context, in *ElasticNetRequest, opts ...grpc.CallOption) (*ElasticNetReply, error)
}

type linearServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinearServiceClient(cc grpc.ClientConnInterface) LinearServiceClient {
	return &linearServiceClient{cc}
}

func (c *linearServiceClient) LinearRegressionEvent(ctx context.Context, in *LinearRegressionRequest, opts ...grpc.CallOption) (*LinearRegressionReply, error) {
	out := new(LinearRegressionReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/LinearRegressionEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) LinearRidgeEvent(ctx context.Context, in *LinearRidgeRequest, opts ...grpc.CallOption) (*LinearRidgeReply, error) {
	out := new(LinearRidgeReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/LinearRidgeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) LinearRidgeCVEvent(ctx context.Context, in *LinearRidgeCVRequest, opts ...grpc.CallOption) (*LinearRidgeCVReply, error) {
	out := new(LinearRidgeCVReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/LinearRidgeCVEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) LassoExpressionEvent(ctx context.Context, in *LassoExpressionRequest, opts ...grpc.CallOption) (*LassoExpressionReply, error) {
	out := new(LassoExpressionReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/LassoExpressionEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) LassoLarsLassoExpressionEvent(ctx context.Context, in *LassoLarsLassoExpressionRequest, opts ...grpc.CallOption) (*LassoLarsLassoExpressionReply, error) {
	out := new(LassoLarsLassoExpressionReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/LassoLarsLassoExpressionEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) BayesianRidgeEvent(ctx context.Context, in *BayesianRidgeRequest, opts ...grpc.CallOption) (*BayesianRidgeReply, error) {
	out := new(BayesianRidgeReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/BayesianRidgeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) TweedieRegressorEvent(ctx context.Context, in *TweedieRegressorRequest, opts ...grpc.CallOption) (*TweedieRegressorReply, error) {
	out := new(TweedieRegressorReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/TweedieRegressorEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) SGDClassifierEvent(ctx context.Context, in *SGDClassifierRequest, opts ...grpc.CallOption) (*SGDClassifierReply, error) {
	out := new(SGDClassifierReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/SGDClassifierEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linearServiceClient) ElasticNetEvent(ctx context.Context, in *ElasticNetRequest, opts ...grpc.CallOption) (*ElasticNetReply, error) {
	out := new(ElasticNetReply)
	err := c.cc.Invoke(ctx, "/AIProto.LinearService/ElasticNetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinearServiceServer is the server API for LinearService service.
// All implementations must embed UnimplementedLinearServiceServer
// for forward compatibility
type LinearServiceServer interface {
	// Sends a Linear Regression
	LinearRegressionEvent(context.Context, *LinearRegressionRequest) (*LinearRegressionReply, error)
	// Sends a Ridge
	LinearRidgeEvent(context.Context, *LinearRidgeRequest) (*LinearRidgeReply, error)
	// Sends a Ridge CV
	LinearRidgeCVEvent(context.Context, *LinearRidgeCVRequest) (*LinearRidgeCVReply, error)
	// Sends a Lasso
	LassoExpressionEvent(context.Context, *LassoExpressionRequest) (*LassoExpressionReply, error)
	// Send a LassoLars
	LassoLarsLassoExpressionEvent(context.Context, *LassoLarsLassoExpressionRequest) (*LassoLarsLassoExpressionReply, error)
	// Send a Bayesian Ridge
	BayesianRidgeEvent(context.Context, *BayesianRidgeRequest) (*BayesianRidgeReply, error)
	// Send a Tweedie Regressor
	TweedieRegressorEvent(context.Context, *TweedieRegressorRequest) (*TweedieRegressorReply, error)
	// Send a SGD Classifier
	SGDClassifierEvent(context.Context, *SGDClassifierRequest) (*SGDClassifierReply, error)
	// Send a Elastic Net
	ElasticNetEvent(context.Context, *ElasticNetRequest) (*ElasticNetReply, error)
	mustEmbedUnimplementedLinearServiceServer()
}

// UnimplementedLinearServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinearServiceServer struct {
}

func (UnimplementedLinearServiceServer) LinearRegressionEvent(context.Context, *LinearRegressionRequest) (*LinearRegressionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinearRegressionEvent not implemented")
}
func (UnimplementedLinearServiceServer) LinearRidgeEvent(context.Context, *LinearRidgeRequest) (*LinearRidgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinearRidgeEvent not implemented")
}
func (UnimplementedLinearServiceServer) LinearRidgeCVEvent(context.Context, *LinearRidgeCVRequest) (*LinearRidgeCVReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinearRidgeCVEvent not implemented")
}
func (UnimplementedLinearServiceServer) LassoExpressionEvent(context.Context, *LassoExpressionRequest) (*LassoExpressionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LassoExpressionEvent not implemented")
}
func (UnimplementedLinearServiceServer) LassoLarsLassoExpressionEvent(context.Context, *LassoLarsLassoExpressionRequest) (*LassoLarsLassoExpressionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LassoLarsLassoExpressionEvent not implemented")
}
func (UnimplementedLinearServiceServer) BayesianRidgeEvent(context.Context, *BayesianRidgeRequest) (*BayesianRidgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BayesianRidgeEvent not implemented")
}
func (UnimplementedLinearServiceServer) TweedieRegressorEvent(context.Context, *TweedieRegressorRequest) (*TweedieRegressorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TweedieRegressorEvent not implemented")
}
func (UnimplementedLinearServiceServer) SGDClassifierEvent(context.Context, *SGDClassifierRequest) (*SGDClassifierReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SGDClassifierEvent not implemented")
}
func (UnimplementedLinearServiceServer) ElasticNetEvent(context.Context, *ElasticNetRequest) (*ElasticNetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElasticNetEvent not implemented")
}
func (UnimplementedLinearServiceServer) mustEmbedUnimplementedLinearServiceServer() {}

// UnsafeLinearServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinearServiceServer will
// result in compilation errors.
type UnsafeLinearServiceServer interface {
	mustEmbedUnimplementedLinearServiceServer()
}

func RegisterLinearServiceServer(s grpc.ServiceRegistrar, srv LinearServiceServer) {
	s.RegisterService(&LinearService_ServiceDesc, srv)
}

func _LinearService_LinearRegressionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinearRegressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).LinearRegressionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/LinearRegressionEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).LinearRegressionEvent(ctx, req.(*LinearRegressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_LinearRidgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinearRidgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).LinearRidgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/LinearRidgeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).LinearRidgeEvent(ctx, req.(*LinearRidgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_LinearRidgeCVEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinearRidgeCVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).LinearRidgeCVEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/LinearRidgeCVEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).LinearRidgeCVEvent(ctx, req.(*LinearRidgeCVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_LassoExpressionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LassoExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).LassoExpressionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/LassoExpressionEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).LassoExpressionEvent(ctx, req.(*LassoExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_LassoLarsLassoExpressionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LassoLarsLassoExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).LassoLarsLassoExpressionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/LassoLarsLassoExpressionEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).LassoLarsLassoExpressionEvent(ctx, req.(*LassoLarsLassoExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_BayesianRidgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BayesianRidgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).BayesianRidgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/BayesianRidgeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).BayesianRidgeEvent(ctx, req.(*BayesianRidgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_TweedieRegressorEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweedieRegressorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).TweedieRegressorEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/TweedieRegressorEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).TweedieRegressorEvent(ctx, req.(*TweedieRegressorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_SGDClassifierEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGDClassifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).SGDClassifierEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/SGDClassifierEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).SGDClassifierEvent(ctx, req.(*SGDClassifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinearService_ElasticNetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElasticNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinearServiceServer).ElasticNetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.LinearService/ElasticNetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinearServiceServer).ElasticNetEvent(ctx, req.(*ElasticNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinearService_ServiceDesc is the grpc.ServiceDesc for LinearService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinearService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AIProto.LinearService",
	HandlerType: (*LinearServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinearRegressionEvent",
			Handler:    _LinearService_LinearRegressionEvent_Handler,
		},
		{
			MethodName: "LinearRidgeEvent",
			Handler:    _LinearService_LinearRidgeEvent_Handler,
		},
		{
			MethodName: "LinearRidgeCVEvent",
			Handler:    _LinearService_LinearRidgeCVEvent_Handler,
		},
		{
			MethodName: "LassoExpressionEvent",
			Handler:    _LinearService_LassoExpressionEvent_Handler,
		},
		{
			MethodName: "LassoLarsLassoExpressionEvent",
			Handler:    _LinearService_LassoLarsLassoExpressionEvent_Handler,
		},
		{
			MethodName: "BayesianRidgeEvent",
			Handler:    _LinearService_BayesianRidgeEvent_Handler,
		},
		{
			MethodName: "TweedieRegressorEvent",
			Handler:    _LinearService_TweedieRegressorEvent_Handler,
		},
		{
			MethodName: "SGDClassifierEvent",
			Handler:    _LinearService_SGDClassifierEvent_Handler,
		},
		{
			MethodName: "ElasticNetEvent",
			Handler:    _LinearService_ElasticNetEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linear_expression.proto",
}
