// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneralServiceClient is the client API for GeneralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralServiceClient interface {
	// Sends a Header
	HeaderEvent(ctx context.Context, in *HeaderRequest, opts ...grpc.CallOption) (*DataFrame, error)
	// Send a Info
	InfoEvent(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*DataFrame, error)
	// send a Describler
	DescriblerEvent(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DataFrame, error)
}

type generalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralServiceClient(cc grpc.ClientConnInterface) GeneralServiceClient {
	return &generalServiceClient{cc}
}

func (c *generalServiceClient) HeaderEvent(ctx context.Context, in *HeaderRequest, opts ...grpc.CallOption) (*DataFrame, error) {
	out := new(DataFrame)
	err := c.cc.Invoke(ctx, "/AIProto.GeneralService/HeaderEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalServiceClient) InfoEvent(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*DataFrame, error) {
	out := new(DataFrame)
	err := c.cc.Invoke(ctx, "/AIProto.GeneralService/InfoEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalServiceClient) DescriblerEvent(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DataFrame, error) {
	out := new(DataFrame)
	err := c.cc.Invoke(ctx, "/AIProto.GeneralService/DescriblerEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralServiceServer is the server API for GeneralService service.
// All implementations must embed UnimplementedGeneralServiceServer
// for forward compatibility
type GeneralServiceServer interface {
	// Sends a Header
	HeaderEvent(context.Context, *HeaderRequest) (*DataFrame, error)
	// Send a Info
	InfoEvent(context.Context, *InfoRequest) (*DataFrame, error)
	// send a Describler
	DescriblerEvent(context.Context, *DescribeRequest) (*DataFrame, error)
	mustEmbedUnimplementedGeneralServiceServer()
}

// UnimplementedGeneralServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralServiceServer struct {
}

func (UnimplementedGeneralServiceServer) HeaderEvent(context.Context, *HeaderRequest) (*DataFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeaderEvent not implemented")
}
func (UnimplementedGeneralServiceServer) InfoEvent(context.Context, *InfoRequest) (*DataFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoEvent not implemented")
}
func (UnimplementedGeneralServiceServer) DescriblerEvent(context.Context, *DescribeRequest) (*DataFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescriblerEvent not implemented")
}
func (UnimplementedGeneralServiceServer) mustEmbedUnimplementedGeneralServiceServer() {}

// UnsafeGeneralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralServiceServer will
// result in compilation errors.
type UnsafeGeneralServiceServer interface {
	mustEmbedUnimplementedGeneralServiceServer()
}

func RegisterGeneralServiceServer(s grpc.ServiceRegistrar, srv GeneralServiceServer) {
	s.RegisterService(&GeneralService_ServiceDesc, srv)
}

func _GeneralService_HeaderEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).HeaderEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.GeneralService/HeaderEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).HeaderEvent(ctx, req.(*HeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralService_InfoEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).InfoEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.GeneralService/InfoEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).InfoEvent(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralService_DescriblerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).DescriblerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.GeneralService/DescriblerEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).DescriblerEvent(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneralService_ServiceDesc is the grpc.ServiceDesc for GeneralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AIProto.GeneralService",
	HandlerType: (*GeneralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeaderEvent",
			Handler:    _GeneralService_HeaderEvent_Handler,
		},
		{
			MethodName: "InfoEvent",
			Handler:    _GeneralService_InfoEvent_Handler,
		},
		{
			MethodName: "DescriblerEvent",
			Handler:    _GeneralService_DescriblerEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general_expression.proto",
}
