// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SVMServiceClient is the client API for SVMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SVMServiceClient interface {
	// Send a Linear SVC
	LinearSVCEvent(ctx context.Context, in *LinearRequest, opts ...grpc.CallOption) (*LinearReply, error)
	// Send a Linear SVR
	LinearSVREvent(ctx context.Context, in *LinearRequest, opts ...grpc.CallOption) (*LinearReply, error)
	// Send a SVC
	SVCEvent(ctx context.Context, in *SVCRequest, opts ...grpc.CallOption) (*SVCReply, error)
}

type sVMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSVMServiceClient(cc grpc.ClientConnInterface) SVMServiceClient {
	return &sVMServiceClient{cc}
}

func (c *sVMServiceClient) LinearSVCEvent(ctx context.Context, in *LinearRequest, opts ...grpc.CallOption) (*LinearReply, error) {
	out := new(LinearReply)
	err := c.cc.Invoke(ctx, "/AIProto.SVMService/LinearSVCEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVMServiceClient) LinearSVREvent(ctx context.Context, in *LinearRequest, opts ...grpc.CallOption) (*LinearReply, error) {
	out := new(LinearReply)
	err := c.cc.Invoke(ctx, "/AIProto.SVMService/LinearSVREvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVMServiceClient) SVCEvent(ctx context.Context, in *SVCRequest, opts ...grpc.CallOption) (*SVCReply, error) {
	out := new(SVCReply)
	err := c.cc.Invoke(ctx, "/AIProto.SVMService/SVCEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVMServiceServer is the server API for SVMService service.
// All implementations must embed UnimplementedSVMServiceServer
// for forward compatibility
type SVMServiceServer interface {
	// Send a Linear SVC
	LinearSVCEvent(context.Context, *LinearRequest) (*LinearReply, error)
	// Send a Linear SVR
	LinearSVREvent(context.Context, *LinearRequest) (*LinearReply, error)
	// Send a SVC
	SVCEvent(context.Context, *SVCRequest) (*SVCReply, error)
	mustEmbedUnimplementedSVMServiceServer()
}

// UnimplementedSVMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSVMServiceServer struct {
}

func (UnimplementedSVMServiceServer) LinearSVCEvent(context.Context, *LinearRequest) (*LinearReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinearSVCEvent not implemented")
}
func (UnimplementedSVMServiceServer) LinearSVREvent(context.Context, *LinearRequest) (*LinearReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinearSVREvent not implemented")
}
func (UnimplementedSVMServiceServer) SVCEvent(context.Context, *SVCRequest) (*SVCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SVCEvent not implemented")
}
func (UnimplementedSVMServiceServer) mustEmbedUnimplementedSVMServiceServer() {}

// UnsafeSVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SVMServiceServer will
// result in compilation errors.
type UnsafeSVMServiceServer interface {
	mustEmbedUnimplementedSVMServiceServer()
}

func RegisterSVMServiceServer(s grpc.ServiceRegistrar, srv SVMServiceServer) {
	s.RegisterService(&SVMService_ServiceDesc, srv)
}

func _SVMService_LinearSVCEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVMServiceServer).LinearSVCEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.SVMService/LinearSVCEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVMServiceServer).LinearSVCEvent(ctx, req.(*LinearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVMService_LinearSVREvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVMServiceServer).LinearSVREvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.SVMService/LinearSVREvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVMServiceServer).LinearSVREvent(ctx, req.(*LinearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVMService_SVCEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SVCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVMServiceServer).SVCEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.SVMService/SVCEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVMServiceServer).SVCEvent(ctx, req.(*SVCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SVMService_ServiceDesc is the grpc.ServiceDesc for SVMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SVMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AIProto.SVMService",
	HandlerType: (*SVMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinearSVCEvent",
			Handler:    _SVMService_LinearSVCEvent_Handler,
		},
		{
			MethodName: "LinearSVREvent",
			Handler:    _SVMService_LinearSVREvent_Handler,
		},
		{
			MethodName: "SVCEvent",
			Handler:    _SVMService_SVCEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svm_expression.proto",
}
