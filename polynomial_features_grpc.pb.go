// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolynomialServiceClient is the client API for PolynomialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolynomialServiceClient interface {
	// Send a Polynomial Features
	PolynomialFeaturesEvent(ctx context.Context, in *PolynomialFeaturesFitTransformRequest, opts ...grpc.CallOption) (*PolynomialFeaturesFitTransformReply, error)
	// Send a Polynomial Features with Transform
	PolynomialFeaturesFitTransformEvent(ctx context.Context, in *PolynomialFeaturesFitTransformRequest, opts ...grpc.CallOption) (*PolynomialFeaturesFitTransformReply, error)
}

type polynomialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolynomialServiceClient(cc grpc.ClientConnInterface) PolynomialServiceClient {
	return &polynomialServiceClient{cc}
}

func (c *polynomialServiceClient) PolynomialFeaturesEvent(ctx context.Context, in *PolynomialFeaturesFitTransformRequest, opts ...grpc.CallOption) (*PolynomialFeaturesFitTransformReply, error) {
	out := new(PolynomialFeaturesFitTransformReply)
	err := c.cc.Invoke(ctx, "/AIProto.PolynomialService/PolynomialFeaturesEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polynomialServiceClient) PolynomialFeaturesFitTransformEvent(ctx context.Context, in *PolynomialFeaturesFitTransformRequest, opts ...grpc.CallOption) (*PolynomialFeaturesFitTransformReply, error) {
	out := new(PolynomialFeaturesFitTransformReply)
	err := c.cc.Invoke(ctx, "/AIProto.PolynomialService/PolynomialFeaturesFitTransformEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolynomialServiceServer is the server API for PolynomialService service.
// All implementations must embed UnimplementedPolynomialServiceServer
// for forward compatibility
type PolynomialServiceServer interface {
	// Send a Polynomial Features
	PolynomialFeaturesEvent(context.Context, *PolynomialFeaturesFitTransformRequest) (*PolynomialFeaturesFitTransformReply, error)
	// Send a Polynomial Features with Transform
	PolynomialFeaturesFitTransformEvent(context.Context, *PolynomialFeaturesFitTransformRequest) (*PolynomialFeaturesFitTransformReply, error)
	mustEmbedUnimplementedPolynomialServiceServer()
}

// UnimplementedPolynomialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolynomialServiceServer struct {
}

func (UnimplementedPolynomialServiceServer) PolynomialFeaturesEvent(context.Context, *PolynomialFeaturesFitTransformRequest) (*PolynomialFeaturesFitTransformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolynomialFeaturesEvent not implemented")
}
func (UnimplementedPolynomialServiceServer) PolynomialFeaturesFitTransformEvent(context.Context, *PolynomialFeaturesFitTransformRequest) (*PolynomialFeaturesFitTransformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolynomialFeaturesFitTransformEvent not implemented")
}
func (UnimplementedPolynomialServiceServer) mustEmbedUnimplementedPolynomialServiceServer() {}

// UnsafePolynomialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolynomialServiceServer will
// result in compilation errors.
type UnsafePolynomialServiceServer interface {
	mustEmbedUnimplementedPolynomialServiceServer()
}

func RegisterPolynomialServiceServer(s grpc.ServiceRegistrar, srv PolynomialServiceServer) {
	s.RegisterService(&PolynomialService_ServiceDesc, srv)
}

func _PolynomialService_PolynomialFeaturesEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolynomialFeaturesFitTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolynomialServiceServer).PolynomialFeaturesEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.PolynomialService/PolynomialFeaturesEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolynomialServiceServer).PolynomialFeaturesEvent(ctx, req.(*PolynomialFeaturesFitTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolynomialService_PolynomialFeaturesFitTransformEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolynomialFeaturesFitTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolynomialServiceServer).PolynomialFeaturesFitTransformEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AIProto.PolynomialService/PolynomialFeaturesFitTransformEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolynomialServiceServer).PolynomialFeaturesFitTransformEvent(ctx, req.(*PolynomialFeaturesFitTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolynomialService_ServiceDesc is the grpc.ServiceDesc for PolynomialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolynomialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AIProto.PolynomialService",
	HandlerType: (*PolynomialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PolynomialFeaturesEvent",
			Handler:    _PolynomialService_PolynomialFeaturesEvent_Handler,
		},
		{
			MethodName: "PolynomialFeaturesFitTransformEvent",
			Handler:    _PolynomialService_PolynomialFeaturesFitTransformEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polynomial_features.proto",
}
