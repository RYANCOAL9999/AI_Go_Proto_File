// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.4
// source: svm_expression.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Linear kwargs with optional type.
type Linearkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Penalty          *Penalty     `protobuf:"varint,1,opt,name=penalty,proto3,enum=AIProto.Penalty,oneof" json:"penalty,omitempty"`
	Loss             *Loss        `protobuf:"varint,2,opt,name=loss,proto3,enum=AIProto.Loss,oneof" json:"loss,omitempty"`
	Dual             *bool        `protobuf:"varint,3,opt,name=dual,proto3,oneof" json:"dual,omitempty"`
	Tol              *float32     `protobuf:"fixed32,4,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	C                *float32     `protobuf:"fixed32,5,opt,name=C,proto3,oneof" json:"C,omitempty"`
	MultiClass       *Multi_Class `protobuf:"varint,6,opt,name=multi_class,json=multiClass,proto3,enum=AIProto.Multi_Class,oneof" json:"multi_class,omitempty"`
	FitIntercept     *bool        `protobuf:"varint,7,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	InterceptScaling *float32     `protobuf:"fixed32,8,opt,name=intercept_scaling,json=interceptScaling,proto3,oneof" json:"intercept_scaling,omitempty"`
	ClassWeight      *anypb.Any   `protobuf:"bytes,9,opt,name=class_weight,json=classWeight,proto3,oneof" json:"class_weight,omitempty"`
	Verbose          *int32       `protobuf:"varint,10,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	RandomState      *anypb.Any   `protobuf:"bytes,11,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	MaxIter          *int64       `protobuf:"varint,12,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
}

func (x *Linearkwargs) Reset() {
	*x = Linearkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svm_expression_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Linearkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linearkwargs) ProtoMessage() {}

func (x *Linearkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_svm_expression_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linearkwargs.ProtoReflect.Descriptor instead.
func (*Linearkwargs) Descriptor() ([]byte, []int) {
	return file_svm_expression_proto_rawDescGZIP(), []int{0}
}

func (x *Linearkwargs) GetPenalty() Penalty {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return Penalty_PENALTY_L2
}

func (x *Linearkwargs) GetLoss() Loss {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return Loss_LOSS_HINGE
}

func (x *Linearkwargs) GetDual() bool {
	if x != nil && x.Dual != nil {
		return *x.Dual
	}
	return false
}

func (x *Linearkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *Linearkwargs) GetC() float32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

func (x *Linearkwargs) GetMultiClass() Multi_Class {
	if x != nil && x.MultiClass != nil {
		return *x.MultiClass
	}
	return Multi_Class_MULTI_CLASS_OVR
}

func (x *Linearkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *Linearkwargs) GetInterceptScaling() float32 {
	if x != nil && x.InterceptScaling != nil {
		return *x.InterceptScaling
	}
	return 0
}

func (x *Linearkwargs) GetClassWeight() *anypb.Any {
	if x != nil {
		return x.ClassWeight
	}
	return nil
}

func (x *Linearkwargs) GetVerbose() int32 {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return 0
}

func (x *Linearkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

func (x *Linearkwargs) GetMaxIter() int64 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

// SVC kwargs with optional type.
type SVCkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Penalty          *Penalty     `protobuf:"varint,1,opt,name=penalty,proto3,enum=AIProto.Penalty,oneof" json:"penalty,omitempty"`
	Loss             *Loss        `protobuf:"varint,2,opt,name=loss,proto3,enum=AIProto.Loss,oneof" json:"loss,omitempty"`
	Dual             *bool        `protobuf:"varint,3,opt,name=dual,proto3,oneof" json:"dual,omitempty"`
	Tol              *float32     `protobuf:"fixed32,4,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	C                *float32     `protobuf:"fixed32,5,opt,name=C,proto3,oneof" json:"C,omitempty"`
	MultiClass       *Multi_Class `protobuf:"varint,6,opt,name=multi_class,json=multiClass,proto3,enum=AIProto.Multi_Class,oneof" json:"multi_class,omitempty"`
	FitIntercept     *bool        `protobuf:"varint,7,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	InterceptScaling *float32     `protobuf:"fixed32,8,opt,name=intercept_scaling,json=interceptScaling,proto3,oneof" json:"intercept_scaling,omitempty"`
	ClassWeight      *anypb.Any   `protobuf:"bytes,9,opt,name=class_weight,json=classWeight,proto3,oneof" json:"class_weight,omitempty"`
	Verbose          *int32       `protobuf:"varint,10,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	RandomState      *anypb.Any   `protobuf:"bytes,11,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	MaxIter          *int64       `protobuf:"varint,12,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
}

func (x *SVCkwargs) Reset() {
	*x = SVCkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svm_expression_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVCkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVCkwargs) ProtoMessage() {}

func (x *SVCkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_svm_expression_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVCkwargs.ProtoReflect.Descriptor instead.
func (*SVCkwargs) Descriptor() ([]byte, []int) {
	return file_svm_expression_proto_rawDescGZIP(), []int{1}
}

func (x *SVCkwargs) GetPenalty() Penalty {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return Penalty_PENALTY_L2
}

func (x *SVCkwargs) GetLoss() Loss {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return Loss_LOSS_HINGE
}

func (x *SVCkwargs) GetDual() bool {
	if x != nil && x.Dual != nil {
		return *x.Dual
	}
	return false
}

func (x *SVCkwargs) GetTol() float32 {
	if x != nil && x.Tol != nil {
		return *x.Tol
	}
	return 0
}

func (x *SVCkwargs) GetC() float32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

func (x *SVCkwargs) GetMultiClass() Multi_Class {
	if x != nil && x.MultiClass != nil {
		return *x.MultiClass
	}
	return Multi_Class_MULTI_CLASS_OVR
}

func (x *SVCkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *SVCkwargs) GetInterceptScaling() float32 {
	if x != nil && x.InterceptScaling != nil {
		return *x.InterceptScaling
	}
	return 0
}

func (x *SVCkwargs) GetClassWeight() *anypb.Any {
	if x != nil {
		return x.ClassWeight
	}
	return nil
}

func (x *SVCkwargs) GetVerbose() int32 {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return 0
}

func (x *SVCkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

func (x *SVCkwargs) GetMaxIter() int64 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

// The request message containing the Linear 's Data.
type LinearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any    `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any    `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any    `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any    `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key          string        `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any    `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *Linearkwargs `protobuf:"bytes,7,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *LinearRequest) Reset() {
	*x = LinearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svm_expression_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRequest) ProtoMessage() {}

func (x *LinearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svm_expression_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRequest.ProtoReflect.Descriptor instead.
func (*LinearRequest) Descriptor() ([]byte, []int) {
	return file_svm_expression_proto_rawDescGZIP(), []int{2}
}

func (x *LinearRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *LinearRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *LinearRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *LinearRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *LinearRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LinearRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *LinearRequest) GetKwargs() *Linearkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Linear.
type LinearReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NIter_          *int32     `protobuf:"varint,1,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	FeatureNamesIn_ *NDArray   `protobuf:"bytes,2,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,3,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	Classes_        *NDArray   `protobuf:"bytes,4,opt,name=classes_,json=classes,proto3,oneof" json:"classes_,omitempty"`
	Intercept_      *anypb.Any `protobuf:"bytes,5,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,6,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
}

func (x *LinearReply) Reset() {
	*x = LinearReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svm_expression_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearReply) ProtoMessage() {}

func (x *LinearReply) ProtoReflect() protoreflect.Message {
	mi := &file_svm_expression_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearReply.ProtoReflect.Descriptor instead.
func (*LinearReply) Descriptor() ([]byte, []int) {
	return file_svm_expression_proto_rawDescGZIP(), []int{3}
}

func (x *LinearReply) GetNIter_() int32 {
	if x != nil && x.NIter_ != nil {
		return *x.NIter_
	}
	return 0
}

func (x *LinearReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *LinearReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *LinearReply) GetClasses_() *NDArray {
	if x != nil {
		return x.Classes_
	}
	return nil
}

func (x *LinearReply) GetIntercept_() *anypb.Any {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *LinearReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

// The request message containing the SVC's Data.
type SVCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData    *anypb.Any `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size         *anypb.Any `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key          string     `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	SampleWeight *anypb.Any `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Kwargs       *SVCkwargs `protobuf:"bytes,7,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *SVCRequest) Reset() {
	*x = SVCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svm_expression_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVCRequest) ProtoMessage() {}

func (x *SVCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svm_expression_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVCRequest.ProtoReflect.Descriptor instead.
func (*SVCRequest) Descriptor() ([]byte, []int) {
	return file_svm_expression_proto_rawDescGZIP(), []int{4}
}

func (x *SVCRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *SVCRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *SVCRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *SVCRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *SVCRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SVCRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *SVCRequest) GetKwargs() *SVCkwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the SVC.
type SVCReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapeFit_       *anypb.Any `protobuf:"bytes,1,opt,name=shape_fit_,json=shapeFit,proto3,oneof" json:"shape_fit_,omitempty"`
	ProbB_          *NDArray   `protobuf:"bytes,2,opt,name=probB_,json=probB,proto3,oneof" json:"probB_,omitempty"`
	ProbA_          *NDArray   `protobuf:"bytes,3,opt,name=probA_,json=probA,proto3,oneof" json:"probA_,omitempty"`
	NSupport_       *NDArray   `protobuf:"bytes,4,opt,name=n_support_,json=nSupport,proto3,oneof" json:"n_support_,omitempty"`
	SupportVectors_ *NDArray   `protobuf:"bytes,5,opt,name=support_vectors_,json=supportVectors,proto3,oneof" json:"support_vectors_,omitempty"`
	Support_        *NDArray   `protobuf:"bytes,6,opt,name=support_,json=support,proto3,oneof" json:"support_,omitempty"`
	NIter_          *NDArray   `protobuf:"bytes,7,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	FeatureNamesIn_ *NDArray   `protobuf:"bytes,8,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,9,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	Intercept_      *NDArray   `protobuf:"bytes,10,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	FitStatus_      *int32     `protobuf:"varint,11,opt,name=fit_status_,json=fitStatus,proto3,oneof" json:"fit_status_,omitempty"`
	DualCoef_       *NDArray   `protobuf:"bytes,12,opt,name=dual_coef_,json=dualCoef,proto3,oneof" json:"dual_coef_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,13,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
	Classes_        *NDArray   `protobuf:"bytes,14,opt,name=classes_,json=classes,proto3,oneof" json:"classes_,omitempty"`
	ClassWeight_    *NDArray   `protobuf:"bytes,15,opt,name=class_weight_,json=classWeight,proto3,oneof" json:"class_weight_,omitempty"`
}

func (x *SVCReply) Reset() {
	*x = SVCReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svm_expression_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVCReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVCReply) ProtoMessage() {}

func (x *SVCReply) ProtoReflect() protoreflect.Message {
	mi := &file_svm_expression_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVCReply.ProtoReflect.Descriptor instead.
func (*SVCReply) Descriptor() ([]byte, []int) {
	return file_svm_expression_proto_rawDescGZIP(), []int{5}
}

func (x *SVCReply) GetShapeFit_() *anypb.Any {
	if x != nil {
		return x.ShapeFit_
	}
	return nil
}

func (x *SVCReply) GetProbB_() *NDArray {
	if x != nil {
		return x.ProbB_
	}
	return nil
}

func (x *SVCReply) GetProbA_() *NDArray {
	if x != nil {
		return x.ProbA_
	}
	return nil
}

func (x *SVCReply) GetNSupport_() *NDArray {
	if x != nil {
		return x.NSupport_
	}
	return nil
}

func (x *SVCReply) GetSupportVectors_() *NDArray {
	if x != nil {
		return x.SupportVectors_
	}
	return nil
}

func (x *SVCReply) GetSupport_() *NDArray {
	if x != nil {
		return x.Support_
	}
	return nil
}

func (x *SVCReply) GetNIter_() *NDArray {
	if x != nil {
		return x.NIter_
	}
	return nil
}

func (x *SVCReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *SVCReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *SVCReply) GetIntercept_() *NDArray {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *SVCReply) GetFitStatus_() int32 {
	if x != nil && x.FitStatus_ != nil {
		return *x.FitStatus_
	}
	return 0
}

func (x *SVCReply) GetDualCoef_() *NDArray {
	if x != nil {
		return x.DualCoef_
	}
	return nil
}

func (x *SVCReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

func (x *SVCReply) GetClasses_() *NDArray {
	if x != nil {
		return x.Classes_
	}
	return nil
}

func (x *SVCReply) GetClassWeight_() *NDArray {
	if x != nil {
		return x.ClassWeight_
	}
	return nil
}

var File_svm_expression_proto protoreflect.FileDescriptor

var file_svm_expression_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x76, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x6c, 0x69, 0x62, 0x2f, 0x6e, 0x70, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x05, 0x0a, 0x0c,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x07,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x49,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x04, 0x64, 0x75, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x03, 0x74,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x01, 0x43, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0c, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x08, 0x52, 0x0b,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x0a, 0x52, 0x0b, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f,
	0x6c, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x43, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x22, 0x99, 0x05, 0x0a, 0x09, 0x53,
	0x56, 0x43, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x04, 0x64, 0x75, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x11, 0x0a, 0x01, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x01,
	0x43, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x0a, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x64, 0x75, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42, 0x04, 0x0a,
	0x02, 0x5f, 0x43, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x22, 0xe6, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x6b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x89, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1b, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x11,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x03, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x22, 0xe0, 0x02, 0x0a, 0x0a,
	0x53, 0x56, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79, 0x44, 0x72,
	0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x56, 0x43, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xed,
	0x07, 0x0a, 0x08, 0x53, 0x56, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x61, 0x70, 0x65, 0x46, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x42, 0x5f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x01, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x42, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x41, 0x5f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x02, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x41, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x03, 0x52, 0x08, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x04, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x05, 0x52, 0x07, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x5f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x06, 0x52, 0x05, 0x6e,
	0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x07, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x08, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a,
	0x52, 0x09, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x0b, 0x52, 0x08, 0x64, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x65, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x0e, 0x52, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x42, 0x5f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x41,
	0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x5f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x32, 0xc6,
	0x01, 0x0a, 0x0a, 0x53, 0x56, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x56, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x56, 0x52, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x56, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x2e,
	0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x56, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x56, 0x43,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svm_expression_proto_rawDescOnce sync.Once
	file_svm_expression_proto_rawDescData = file_svm_expression_proto_rawDesc
)

func file_svm_expression_proto_rawDescGZIP() []byte {
	file_svm_expression_proto_rawDescOnce.Do(func() {
		file_svm_expression_proto_rawDescData = protoimpl.X.CompressGZIP(file_svm_expression_proto_rawDescData)
	})
	return file_svm_expression_proto_rawDescData
}

var file_svm_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_svm_expression_proto_goTypes = []interface{}{
	(*Linearkwargs)(nil),  // 0: AIProto.Linearkwargs
	(*SVCkwargs)(nil),     // 1: AIProto.SVCkwargs
	(*LinearRequest)(nil), // 2: AIProto.LinearRequest
	(*LinearReply)(nil),   // 3: AIProto.LinearReply
	(*SVCRequest)(nil),    // 4: AIProto.SVCRequest
	(*SVCReply)(nil),      // 5: AIProto.SVCReply
	(Penalty)(0),          // 6: AIProto.Penalty
	(Loss)(0),             // 7: AIProto.Loss
	(Multi_Class)(0),      // 8: AIProto.Multi_Class
	(*anypb.Any)(nil),     // 9: google.protobuf.Any
	(*NDArray)(nil),       // 10: AIProto.NDArray
}
var file_svm_expression_proto_depIdxs = []int32{
	6,  // 0: AIProto.Linearkwargs.penalty:type_name -> AIProto.Penalty
	7,  // 1: AIProto.Linearkwargs.loss:type_name -> AIProto.Loss
	8,  // 2: AIProto.Linearkwargs.multi_class:type_name -> AIProto.Multi_Class
	9,  // 3: AIProto.Linearkwargs.class_weight:type_name -> google.protobuf.Any
	9,  // 4: AIProto.Linearkwargs.random_state:type_name -> google.protobuf.Any
	6,  // 5: AIProto.SVCkwargs.penalty:type_name -> AIProto.Penalty
	7,  // 6: AIProto.SVCkwargs.loss:type_name -> AIProto.Loss
	8,  // 7: AIProto.SVCkwargs.multi_class:type_name -> AIProto.Multi_Class
	9,  // 8: AIProto.SVCkwargs.class_weight:type_name -> google.protobuf.Any
	9,  // 9: AIProto.SVCkwargs.random_state:type_name -> google.protobuf.Any
	9,  // 10: AIProto.LinearRequest.x_drop_data:type_name -> google.protobuf.Any
	9,  // 11: AIProto.LinearRequest.y_drop_data:type_name -> google.protobuf.Any
	9,  // 12: AIProto.LinearRequest.size:type_name -> google.protobuf.Any
	9,  // 13: AIProto.LinearRequest.random:type_name -> google.protobuf.Any
	9,  // 14: AIProto.LinearRequest.sample_weight:type_name -> google.protobuf.Any
	0,  // 15: AIProto.LinearRequest.kwargs:type_name -> AIProto.Linearkwargs
	10, // 16: AIProto.LinearReply.feature_names_in_:type_name -> AIProto.NDArray
	10, // 17: AIProto.LinearReply.classes_:type_name -> AIProto.NDArray
	9,  // 18: AIProto.LinearReply.intercept_:type_name -> google.protobuf.Any
	10, // 19: AIProto.LinearReply.coef_:type_name -> AIProto.NDArray
	9,  // 20: AIProto.SVCRequest.x_drop_data:type_name -> google.protobuf.Any
	9,  // 21: AIProto.SVCRequest.y_drop_data:type_name -> google.protobuf.Any
	9,  // 22: AIProto.SVCRequest.size:type_name -> google.protobuf.Any
	9,  // 23: AIProto.SVCRequest.random:type_name -> google.protobuf.Any
	9,  // 24: AIProto.SVCRequest.sample_weight:type_name -> google.protobuf.Any
	1,  // 25: AIProto.SVCRequest.kwargs:type_name -> AIProto.SVCkwargs
	9,  // 26: AIProto.SVCReply.shape_fit_:type_name -> google.protobuf.Any
	10, // 27: AIProto.SVCReply.probB_:type_name -> AIProto.NDArray
	10, // 28: AIProto.SVCReply.probA_:type_name -> AIProto.NDArray
	10, // 29: AIProto.SVCReply.n_support_:type_name -> AIProto.NDArray
	10, // 30: AIProto.SVCReply.support_vectors_:type_name -> AIProto.NDArray
	10, // 31: AIProto.SVCReply.support_:type_name -> AIProto.NDArray
	10, // 32: AIProto.SVCReply.n_iter_:type_name -> AIProto.NDArray
	10, // 33: AIProto.SVCReply.feature_names_in_:type_name -> AIProto.NDArray
	10, // 34: AIProto.SVCReply.intercept_:type_name -> AIProto.NDArray
	10, // 35: AIProto.SVCReply.dual_coef_:type_name -> AIProto.NDArray
	10, // 36: AIProto.SVCReply.coef_:type_name -> AIProto.NDArray
	10, // 37: AIProto.SVCReply.classes_:type_name -> AIProto.NDArray
	10, // 38: AIProto.SVCReply.class_weight_:type_name -> AIProto.NDArray
	2,  // 39: AIProto.SVMService.LinearSVCEvent:input_type -> AIProto.LinearRequest
	2,  // 40: AIProto.SVMService.LinearSVREvent:input_type -> AIProto.LinearRequest
	4,  // 41: AIProto.SVMService.SVCEvent:input_type -> AIProto.SVCRequest
	3,  // 42: AIProto.SVMService.LinearSVCEvent:output_type -> AIProto.LinearReply
	3,  // 43: AIProto.SVMService.LinearSVREvent:output_type -> AIProto.LinearReply
	5,  // 44: AIProto.SVMService.SVCEvent:output_type -> AIProto.SVCReply
	42, // [42:45] is the sub-list for method output_type
	39, // [39:42] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_svm_expression_proto_init() }
func file_svm_expression_proto_init() {
	if File_svm_expression_proto != nil {
		return
	}
	file_lib_np_library_proto_init()
	file_lib_enum_expression_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svm_expression_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Linearkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svm_expression_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVCkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svm_expression_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svm_expression_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svm_expression_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svm_expression_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVCReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_svm_expression_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_svm_expression_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_svm_expression_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_svm_expression_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_svm_expression_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_svm_expression_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svm_expression_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svm_expression_proto_goTypes,
		DependencyIndexes: file_svm_expression_proto_depIdxs,
		MessageInfos:      file_svm_expression_proto_msgTypes,
	}.Build()
	File_svm_expression_proto = out.File
	file_svm_expression_proto_rawDesc = nil
	file_svm_expression_proto_goTypes = nil
	file_svm_expression_proto_depIdxs = nil
}
