// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.4
// source: nearest_neighbors.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Nearest Neighbors kwargs with optional type.
type NearestNeighborskwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NNeighbors   *int32     `protobuf:"varint,1,opt,name=n_neighbors,json=nNeighbors,proto3,oneof" json:"n_neighbors,omitempty"`
	Radius       *float32   `protobuf:"fixed32,2,opt,name=radius,proto3,oneof" json:"radius,omitempty"`
	Algorithm    *Algorithm `protobuf:"varint,3,opt,name=algorithm,proto3,enum=AIProto.Algorithm,oneof" json:"algorithm,omitempty"`
	LeafSize     *int32     `protobuf:"varint,4,opt,name=leaf_size,json=leafSize,proto3,oneof" json:"leaf_size,omitempty"`
	Metric       *anypb.Any `protobuf:"bytes,5,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
	P            *float32   `protobuf:"fixed32,6,opt,name=p,proto3,oneof" json:"p,omitempty"`
	MetricParams *anypb.Any `protobuf:"bytes,7,opt,name=metric_params,json=metricParams,proto3,oneof" json:"metric_params,omitempty"`
	NJobs        *anypb.Any `protobuf:"bytes,8,opt,name=n_jobs,json=nJobs,proto3,oneof" json:"n_jobs,omitempty"`
}

func (x *NearestNeighborskwargs) Reset() {
	*x = NearestNeighborskwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestNeighborskwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestNeighborskwargs) ProtoMessage() {}

func (x *NearestNeighborskwargs) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestNeighborskwargs.ProtoReflect.Descriptor instead.
func (*NearestNeighborskwargs) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{0}
}

func (x *NearestNeighborskwargs) GetNNeighbors() int32 {
	if x != nil && x.NNeighbors != nil {
		return *x.NNeighbors
	}
	return 0
}

func (x *NearestNeighborskwargs) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *NearestNeighborskwargs) GetAlgorithm() Algorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return Algorithm_ALGORITHM_AUTO
}

func (x *NearestNeighborskwargs) GetLeafSize() int32 {
	if x != nil && x.LeafSize != nil {
		return *x.LeafSize
	}
	return 0
}

func (x *NearestNeighborskwargs) GetMetric() *anypb.Any {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *NearestNeighborskwargs) GetP() float32 {
	if x != nil && x.P != nil {
		return *x.P
	}
	return 0
}

func (x *NearestNeighborskwargs) GetMetricParams() *anypb.Any {
	if x != nil {
		return x.MetricParams
	}
	return nil
}

func (x *NearestNeighborskwargs) GetNJobs() *anypb.Any {
	if x != nil {
		return x.NJobs
	}
	return nil
}

// The request message containing the Nearest Neighbors's Data.
type NearestNeighborsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData *anypb.Any              `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	Size      *anypb.Any              `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Random    *anypb.Any              `protobuf:"bytes,3,opt,name=random,proto3" json:"random,omitempty"`
	Key       string                  `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	YDropData *anypb.Any              `protobuf:"bytes,5,opt,name=y_drop_data,json=yDropData,proto3,oneof" json:"y_drop_data,omitempty"`
	Kwargs    *NearestNeighborskwargs `protobuf:"bytes,6,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
}

func (x *NearestNeighborsRequest) Reset() {
	*x = NearestNeighborsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestNeighborsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestNeighborsRequest) ProtoMessage() {}

func (x *NearestNeighborsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestNeighborsRequest.ProtoReflect.Descriptor instead.
func (*NearestNeighborsRequest) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{1}
}

func (x *NearestNeighborsRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *NearestNeighborsRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *NearestNeighborsRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *NearestNeighborsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NearestNeighborsRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *NearestNeighborsRequest) GetKwargs() *NearestNeighborskwargs {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

// The response message containing the Nearest Neighbors.
type NearestNeighborsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NSamplesFit_           *int32     `protobuf:"varint,1,opt,name=n_samples_fit_,json=nSamplesFit,proto3,oneof" json:"n_samples_fit_,omitempty"`
	FeatureNamesIn_        *NDArray   `protobuf:"bytes,2,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_           *int32     `protobuf:"varint,3,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	EffectiveMetricParams_ *anypb.Any `protobuf:"bytes,4,opt,name=effective_metric_params_,json=effectiveMetricParams,proto3,oneof" json:"effective_metric_params_,omitempty"`
	EffectiveMetric_       *string    `protobuf:"bytes,5,opt,name=effective_metric_,json=effectiveMetric,proto3,oneof" json:"effective_metric_,omitempty"`
}

func (x *NearestNeighborsReply) Reset() {
	*x = NearestNeighborsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestNeighborsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestNeighborsReply) ProtoMessage() {}

func (x *NearestNeighborsReply) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestNeighborsReply.ProtoReflect.Descriptor instead.
func (*NearestNeighborsReply) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{2}
}

func (x *NearestNeighborsReply) GetNSamplesFit_() int32 {
	if x != nil && x.NSamplesFit_ != nil {
		return *x.NSamplesFit_
	}
	return 0
}

func (x *NearestNeighborsReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *NearestNeighborsReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *NearestNeighborsReply) GetEffectiveMetricParams_() *anypb.Any {
	if x != nil {
		return x.EffectiveMetricParams_
	}
	return nil
}

func (x *NearestNeighborsReply) GetEffectiveMetric_() string {
	if x != nil && x.EffectiveMetric_ != nil {
		return *x.EffectiveMetric_
	}
	return ""
}

// The response message containing the KD Tree's Data.
type KDTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	Size         *anypb.Any `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any `protobuf:"bytes,3,opt,name=random,proto3" json:"random,omitempty"`
	Key          string     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	YDropData    *anypb.Any `protobuf:"bytes,5,opt,name=y_drop_data,json=yDropData,proto3,oneof" json:"y_drop_data,omitempty"`
	SampleWeight *anypb.Any `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	K            *uint32    `protobuf:"varint,7,opt,name=k,proto3,oneof" json:"k,omitempty"`
	// Types that are assignable to Instrument:
	//	*KDTreeRequest_LeafSize
	//	*KDTreeRequest_Metric
	//	*KDTreeRequest_ReturnsDistance
	//	*KDTreeRequest_Dualtree
	//	*KDTreeRequest_BreadthFirst
	//	*KDTreeRequest_SortResults
	//	*KDTreeRequest_Kwargs
	Instrument isKDTreeRequest_Instrument `protobuf_oneof:"instrument"`
}

func (x *KDTreeRequest) Reset() {
	*x = KDTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KDTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDTreeRequest) ProtoMessage() {}

func (x *KDTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDTreeRequest.ProtoReflect.Descriptor instead.
func (*KDTreeRequest) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{3}
}

func (x *KDTreeRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *KDTreeRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *KDTreeRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *KDTreeRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KDTreeRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *KDTreeRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *KDTreeRequest) GetK() uint32 {
	if x != nil && x.K != nil {
		return *x.K
	}
	return 0
}

func (m *KDTreeRequest) GetInstrument() isKDTreeRequest_Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (x *KDTreeRequest) GetLeafSize() int32 {
	if x, ok := x.GetInstrument().(*KDTreeRequest_LeafSize); ok {
		return x.LeafSize
	}
	return 0
}

func (x *KDTreeRequest) GetMetric() string {
	if x, ok := x.GetInstrument().(*KDTreeRequest_Metric); ok {
		return x.Metric
	}
	return ""
}

func (x *KDTreeRequest) GetReturnsDistance() bool {
	if x, ok := x.GetInstrument().(*KDTreeRequest_ReturnsDistance); ok {
		return x.ReturnsDistance
	}
	return false
}

func (x *KDTreeRequest) GetDualtree() bool {
	if x, ok := x.GetInstrument().(*KDTreeRequest_Dualtree); ok {
		return x.Dualtree
	}
	return false
}

func (x *KDTreeRequest) GetBreadthFirst() bool {
	if x, ok := x.GetInstrument().(*KDTreeRequest_BreadthFirst); ok {
		return x.BreadthFirst
	}
	return false
}

func (x *KDTreeRequest) GetSortResults() bool {
	if x, ok := x.GetInstrument().(*KDTreeRequest_SortResults); ok {
		return x.SortResults
	}
	return false
}

func (x *KDTreeRequest) GetKwargs() *anypb.Any {
	if x, ok := x.GetInstrument().(*KDTreeRequest_Kwargs); ok {
		return x.Kwargs
	}
	return nil
}

type isKDTreeRequest_Instrument interface {
	isKDTreeRequest_Instrument()
}

type KDTreeRequest_LeafSize struct {
	LeafSize int32 `protobuf:"varint,8,opt,name=leaf_size,json=leafSize,proto3,oneof"`
}

type KDTreeRequest_Metric struct {
	Metric string `protobuf:"bytes,9,opt,name=metric,proto3,oneof"`
}

type KDTreeRequest_ReturnsDistance struct {
	ReturnsDistance bool `protobuf:"varint,10,opt,name=returns_distance,json=returnsDistance,proto3,oneof"`
}

type KDTreeRequest_Dualtree struct {
	Dualtree bool `protobuf:"varint,11,opt,name=dualtree,proto3,oneof"`
}

type KDTreeRequest_BreadthFirst struct {
	BreadthFirst bool `protobuf:"varint,12,opt,name=breadth_first,json=breadthFirst,proto3,oneof"`
}

type KDTreeRequest_SortResults struct {
	SortResults bool `protobuf:"varint,13,opt,name=sort_results,json=sortResults,proto3,oneof"`
}

type KDTreeRequest_Kwargs struct {
	Kwargs *anypb.Any `protobuf:"bytes,14,opt,name=kwargs,proto3,oneof"`
}

func (*KDTreeRequest_LeafSize) isKDTreeRequest_Instrument() {}

func (*KDTreeRequest_Metric) isKDTreeRequest_Instrument() {}

func (*KDTreeRequest_ReturnsDistance) isKDTreeRequest_Instrument() {}

func (*KDTreeRequest_Dualtree) isKDTreeRequest_Instrument() {}

func (*KDTreeRequest_BreadthFirst) isKDTreeRequest_Instrument() {}

func (*KDTreeRequest_SortResults) isKDTreeRequest_Instrument() {}

func (*KDTreeRequest_Kwargs) isKDTreeRequest_Instrument() {}

// The response message containing the KD Tree.
type KDTreeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix *anypb.Any `protobuf:"bytes,1,opt,name=matrix,proto3,oneof" json:"matrix,omitempty"`
}

func (x *KDTreeReply) Reset() {
	*x = KDTreeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KDTreeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDTreeReply) ProtoMessage() {}

func (x *KDTreeReply) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDTreeReply.ProtoReflect.Descriptor instead.
func (*KDTreeReply) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{4}
}

func (x *KDTreeReply) GetMatrix() *anypb.Any {
	if x != nil {
		return x.Matrix
	}
	return nil
}

// The request message containing the Nearest Centroid 's Data.
type NearestCentroidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData       *anypb.Any `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	YDropData       *anypb.Any `protobuf:"bytes,2,opt,name=y_drop_data,json=yDropData,proto3" json:"y_drop_data,omitempty"`
	Size            *anypb.Any `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Random          *anypb.Any `protobuf:"bytes,4,opt,name=random,proto3" json:"random,omitempty"`
	Key             string     `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Metric          *anypb.Any `protobuf:"bytes,6,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
	ShrinkThreshold *float32   `protobuf:"fixed32,7,opt,name=shrink_threshold,json=shrinkThreshold,proto3,oneof" json:"shrink_threshold,omitempty"`
}

func (x *NearestCentroidRequest) Reset() {
	*x = NearestCentroidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestCentroidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestCentroidRequest) ProtoMessage() {}

func (x *NearestCentroidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestCentroidRequest.ProtoReflect.Descriptor instead.
func (*NearestCentroidRequest) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{5}
}

func (x *NearestCentroidRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *NearestCentroidRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *NearestCentroidRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *NearestCentroidRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *NearestCentroidRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NearestCentroidRequest) GetMetric() *anypb.Any {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *NearestCentroidRequest) GetShrinkThreshold() float32 {
	if x != nil && x.ShrinkThreshold != nil {
		return *x.ShrinkThreshold
	}
	return 0
}

// The response message containing the Nearest Centroid.
type NearestCentroidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureNamesIn_ *NDArray `protobuf:"bytes,1,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32   `protobuf:"varint,2,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	Classes_        *NDArray `protobuf:"bytes,3,opt,name=classes_,json=classes,proto3,oneof" json:"classes_,omitempty"`
	Centroids_      *NDArray `protobuf:"bytes,4,opt,name=centroids_,json=centroids,proto3,oneof" json:"centroids_,omitempty"`
}

func (x *NearestCentroidReply) Reset() {
	*x = NearestCentroidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nearest_neighbors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestCentroidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestCentroidReply) ProtoMessage() {}

func (x *NearestCentroidReply) ProtoReflect() protoreflect.Message {
	mi := &file_nearest_neighbors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestCentroidReply.ProtoReflect.Descriptor instead.
func (*NearestCentroidReply) Descriptor() ([]byte, []int) {
	return file_nearest_neighbors_proto_rawDescGZIP(), []int{6}
}

func (x *NearestCentroidReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *NearestCentroidReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *NearestCentroidReply) GetClasses_() *NDArray {
	if x != nil {
		return x.Classes_
	}
	return nil
}

func (x *NearestCentroidReply) GetCentroids_() *NDArray {
	if x != nil {
		return x.Centroids_
	}
	return nil
}

var File_nearest_neighbors_proto protoreflect.FileDescriptor

var file_nearest_neighbors_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x69, 0x62, 0x2f, 0x6e, 0x70, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x69, 0x62, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1,
	0x03, 0x0a, 0x16, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x6e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x48, 0x02, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x04, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x01, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x06, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x6e,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x07, 0x52, 0x05, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6e, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42,
	0x04, 0x0a, 0x02, 0x5f, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x17, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x09, 0x79, 0x44, 0x72,
	0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa1, 0x03, 0x0a, 0x15, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0e,
	0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x46, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x52, 0x0a, 0x18, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x03, 0x52, 0x15, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x22, 0xf3, 0x04, 0x0a, 0x0d, 0x4b, 0x44, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x48, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x01, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x2b, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x08,
	0x64, 0x75, 0x61, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x61, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x72,
	0x65, 0x61, 0x64, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x6b, 0x22, 0x4b, 0x0a, 0x0b,
	0x4b, 0x44, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x6d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0xf1, 0x02, 0x0a, 0x16, 0x4e, 0x65,
	0x61, 0x72, 0x65, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x79, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xaf, 0x02,
	0x0a, 0x14, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x0b, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64,
	0x73, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x03, 0x52, 0x09, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x73, 0x5f, 0x32,
	0x88, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e,
	0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73,
	0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x4b, 0x44, 0x54, 0x72, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x44, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x44, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x14, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x6f, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x6f,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x6f, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nearest_neighbors_proto_rawDescOnce sync.Once
	file_nearest_neighbors_proto_rawDescData = file_nearest_neighbors_proto_rawDesc
)

func file_nearest_neighbors_proto_rawDescGZIP() []byte {
	file_nearest_neighbors_proto_rawDescOnce.Do(func() {
		file_nearest_neighbors_proto_rawDescData = protoimpl.X.CompressGZIP(file_nearest_neighbors_proto_rawDescData)
	})
	return file_nearest_neighbors_proto_rawDescData
}

var file_nearest_neighbors_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_nearest_neighbors_proto_goTypes = []interface{}{
	(*NearestNeighborskwargs)(nil),  // 0: AIProto.NearestNeighborskwargs
	(*NearestNeighborsRequest)(nil), // 1: AIProto.NearestNeighborsRequest
	(*NearestNeighborsReply)(nil),   // 2: AIProto.NearestNeighborsReply
	(*KDTreeRequest)(nil),           // 3: AIProto.KDTreeRequest
	(*KDTreeReply)(nil),             // 4: AIProto.KDTreeReply
	(*NearestCentroidRequest)(nil),  // 5: AIProto.NearestCentroidRequest
	(*NearestCentroidReply)(nil),    // 6: AIProto.NearestCentroidReply
	(Algorithm)(0),                  // 7: AIProto.Algorithm
	(*anypb.Any)(nil),               // 8: google.protobuf.Any
	(*NDArray)(nil),                 // 9: AIProto.NDArray
}
var file_nearest_neighbors_proto_depIdxs = []int32{
	7,  // 0: AIProto.NearestNeighborskwargs.algorithm:type_name -> AIProto.Algorithm
	8,  // 1: AIProto.NearestNeighborskwargs.metric:type_name -> google.protobuf.Any
	8,  // 2: AIProto.NearestNeighborskwargs.metric_params:type_name -> google.protobuf.Any
	8,  // 3: AIProto.NearestNeighborskwargs.n_jobs:type_name -> google.protobuf.Any
	8,  // 4: AIProto.NearestNeighborsRequest.x_drop_data:type_name -> google.protobuf.Any
	8,  // 5: AIProto.NearestNeighborsRequest.size:type_name -> google.protobuf.Any
	8,  // 6: AIProto.NearestNeighborsRequest.random:type_name -> google.protobuf.Any
	8,  // 7: AIProto.NearestNeighborsRequest.y_drop_data:type_name -> google.protobuf.Any
	0,  // 8: AIProto.NearestNeighborsRequest.kwargs:type_name -> AIProto.NearestNeighborskwargs
	9,  // 9: AIProto.NearestNeighborsReply.feature_names_in_:type_name -> AIProto.NDArray
	8,  // 10: AIProto.NearestNeighborsReply.effective_metric_params_:type_name -> google.protobuf.Any
	8,  // 11: AIProto.KDTreeRequest.x_drop_data:type_name -> google.protobuf.Any
	8,  // 12: AIProto.KDTreeRequest.size:type_name -> google.protobuf.Any
	8,  // 13: AIProto.KDTreeRequest.random:type_name -> google.protobuf.Any
	8,  // 14: AIProto.KDTreeRequest.y_drop_data:type_name -> google.protobuf.Any
	8,  // 15: AIProto.KDTreeRequest.sample_weight:type_name -> google.protobuf.Any
	8,  // 16: AIProto.KDTreeRequest.kwargs:type_name -> google.protobuf.Any
	8,  // 17: AIProto.KDTreeReply.matrix:type_name -> google.protobuf.Any
	8,  // 18: AIProto.NearestCentroidRequest.x_drop_data:type_name -> google.protobuf.Any
	8,  // 19: AIProto.NearestCentroidRequest.y_drop_data:type_name -> google.protobuf.Any
	8,  // 20: AIProto.NearestCentroidRequest.size:type_name -> google.protobuf.Any
	8,  // 21: AIProto.NearestCentroidRequest.random:type_name -> google.protobuf.Any
	8,  // 22: AIProto.NearestCentroidRequest.metric:type_name -> google.protobuf.Any
	9,  // 23: AIProto.NearestCentroidReply.feature_names_in_:type_name -> AIProto.NDArray
	9,  // 24: AIProto.NearestCentroidReply.classes_:type_name -> AIProto.NDArray
	9,  // 25: AIProto.NearestCentroidReply.centroids_:type_name -> AIProto.NDArray
	1,  // 26: AIProto.NeighborsService.NearestNeighborsEvent:input_type -> AIProto.NearestNeighborsRequest
	3,  // 27: AIProto.NeighborsService.KDTreeEvent:input_type -> AIProto.KDTreeRequest
	5,  // 28: AIProto.NeighborsService.NearestCentroidEvent:input_type -> AIProto.NearestCentroidRequest
	2,  // 29: AIProto.NeighborsService.NearestNeighborsEvent:output_type -> AIProto.NearestNeighborsReply
	4,  // 30: AIProto.NeighborsService.KDTreeEvent:output_type -> AIProto.KDTreeReply
	6,  // 31: AIProto.NeighborsService.NearestCentroidEvent:output_type -> AIProto.NearestCentroidReply
	29, // [29:32] is the sub-list for method output_type
	26, // [26:29] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_nearest_neighbors_proto_init() }
func file_nearest_neighbors_proto_init() {
	if File_nearest_neighbors_proto != nil {
		return
	}
	file_lib_np_library_proto_init()
	file_lib_enum_expression_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nearest_neighbors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestNeighborskwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearest_neighbors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestNeighborsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearest_neighbors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestNeighborsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearest_neighbors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KDTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearest_neighbors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KDTreeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearest_neighbors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestCentroidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nearest_neighbors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestCentroidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nearest_neighbors_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_nearest_neighbors_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_nearest_neighbors_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_nearest_neighbors_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*KDTreeRequest_LeafSize)(nil),
		(*KDTreeRequest_Metric)(nil),
		(*KDTreeRequest_ReturnsDistance)(nil),
		(*KDTreeRequest_Dualtree)(nil),
		(*KDTreeRequest_BreadthFirst)(nil),
		(*KDTreeRequest_SortResults)(nil),
		(*KDTreeRequest_Kwargs)(nil),
	}
	file_nearest_neighbors_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_nearest_neighbors_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_nearest_neighbors_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nearest_neighbors_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nearest_neighbors_proto_goTypes,
		DependencyIndexes: file_nearest_neighbors_proto_depIdxs,
		MessageInfos:      file_nearest_neighbors_proto_msgTypes,
	}.Build()
	File_nearest_neighbors_proto = out.File
	file_nearest_neighbors_proto_rawDesc = nil
	file_nearest_neighbors_proto_goTypes = nil
	file_nearest_neighbors_proto_depIdxs = nil
}
