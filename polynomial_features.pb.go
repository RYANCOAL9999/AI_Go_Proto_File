// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.4
// source: polynomial_features.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Polynomial Features with Transform kwargs with optional type.
type PolynomialFeaturesFitTransformkwargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Penalty            *Penalty   `protobuf:"varint,1,opt,name=penalty,proto3,enum=AIProto.Penalty,oneof" json:"penalty,omitempty"`
	Alpha              *float32   `protobuf:"fixed32,2,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"`
	L1Ratio            *float32   `protobuf:"fixed32,3,opt,name=l1_ratio,json=l1Ratio,proto3,oneof" json:"l1_ratio,omitempty"`
	FitIntercept       *bool      `protobuf:"varint,4,opt,name=fit_intercept,json=fitIntercept,proto3,oneof" json:"fit_intercept,omitempty"`
	MaxIter            *int32     `protobuf:"varint,5,opt,name=max_iter,json=maxIter,proto3,oneof" json:"max_iter,omitempty"`
	Tol                *anypb.Any `protobuf:"bytes,6,opt,name=tol,proto3,oneof" json:"tol,omitempty"`
	Shuffle            *bool      `protobuf:"varint,7,opt,name=shuffle,proto3,oneof" json:"shuffle,omitempty"`
	Verbose            *int32     `protobuf:"varint,8,opt,name=verbose,proto3,oneof" json:"verbose,omitempty"`
	Eta0               *float32   `protobuf:"fixed32,9,opt,name=eta0,proto3,oneof" json:"eta0,omitempty"`
	NJobs              *anypb.Any `protobuf:"bytes,10,opt,name=n_jobs,json=nJobs,proto3,oneof" json:"n_jobs,omitempty"`
	RandomState        *anypb.Any `protobuf:"bytes,11,opt,name=random_state,json=randomState,proto3,oneof" json:"random_state,omitempty"`
	EarlyStopping      *bool      `protobuf:"varint,12,opt,name=early_stopping,json=earlyStopping,proto3,oneof" json:"early_stopping,omitempty"`
	ValidationFraction *float32   `protobuf:"fixed32,13,opt,name=validation_fraction,json=validationFraction,proto3,oneof" json:"validation_fraction,omitempty"`
	NIterNoChange      *int32     `protobuf:"varint,14,opt,name=n_iter_no_change,json=nIterNoChange,proto3,oneof" json:"n_iter_no_change,omitempty"`
	ClassWeight        *anypb.Any `protobuf:"bytes,15,opt,name=class_weight,json=classWeight,proto3,oneof" json:"class_weight,omitempty"`
	WarmStart          *bool      `protobuf:"varint,16,opt,name=warm_start,json=warmStart,proto3,oneof" json:"warm_start,omitempty"`
}

func (x *PolynomialFeaturesFitTransformkwargs) Reset() {
	*x = PolynomialFeaturesFitTransformkwargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polynomial_features_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolynomialFeaturesFitTransformkwargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolynomialFeaturesFitTransformkwargs) ProtoMessage() {}

func (x *PolynomialFeaturesFitTransformkwargs) ProtoReflect() protoreflect.Message {
	mi := &file_polynomial_features_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolynomialFeaturesFitTransformkwargs.ProtoReflect.Descriptor instead.
func (*PolynomialFeaturesFitTransformkwargs) Descriptor() ([]byte, []int) {
	return file_polynomial_features_proto_rawDescGZIP(), []int{0}
}

func (x *PolynomialFeaturesFitTransformkwargs) GetPenalty() Penalty {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return Penalty_PENALTY_L2
}

func (x *PolynomialFeaturesFitTransformkwargs) GetAlpha() float32 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetL1Ratio() float32 {
	if x != nil && x.L1Ratio != nil {
		return *x.L1Ratio
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *PolynomialFeaturesFitTransformkwargs) GetMaxIter() int32 {
	if x != nil && x.MaxIter != nil {
		return *x.MaxIter
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetTol() *anypb.Any {
	if x != nil {
		return x.Tol
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformkwargs) GetShuffle() bool {
	if x != nil && x.Shuffle != nil {
		return *x.Shuffle
	}
	return false
}

func (x *PolynomialFeaturesFitTransformkwargs) GetVerbose() int32 {
	if x != nil && x.Verbose != nil {
		return *x.Verbose
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetEta0() float32 {
	if x != nil && x.Eta0 != nil {
		return *x.Eta0
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetNJobs() *anypb.Any {
	if x != nil {
		return x.NJobs
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformkwargs) GetRandomState() *anypb.Any {
	if x != nil {
		return x.RandomState
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformkwargs) GetEarlyStopping() bool {
	if x != nil && x.EarlyStopping != nil {
		return *x.EarlyStopping
	}
	return false
}

func (x *PolynomialFeaturesFitTransformkwargs) GetValidationFraction() float32 {
	if x != nil && x.ValidationFraction != nil {
		return *x.ValidationFraction
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetNIterNoChange() int32 {
	if x != nil && x.NIterNoChange != nil {
		return *x.NIterNoChange
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformkwargs) GetClassWeight() *anypb.Any {
	if x != nil {
		return x.ClassWeight
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformkwargs) GetWarmStart() bool {
	if x != nil && x.WarmStart != nil {
		return *x.WarmStart
	}
	return false
}

// The request message containing the Polynomial Features's Data.
type PolynomialFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData *anypb.Any `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	Size      *anypb.Any `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Random    *anypb.Any `protobuf:"bytes,3,opt,name=random,proto3" json:"random,omitempty"`
	Key       string     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	YDropData *anypb.Any `protobuf:"bytes,5,opt,name=y_drop_data,json=yDropData,proto3,oneof" json:"y_drop_data,omitempty"`
	Degree    *anypb.Any `protobuf:"bytes,6,opt,name=degree,proto3,oneof" json:"degree,omitempty"`
	// Types that are assignable to Instrument:
	//	*PolynomialFeaturesRequest_InteractionOnly
	//	*PolynomialFeaturesRequest_IncludeBias
	//	*PolynomialFeaturesRequest_Order
	//	*PolynomialFeaturesRequest_Kwargs
	Instrument isPolynomialFeaturesRequest_Instrument `protobuf_oneof:"instrument"`
}

func (x *PolynomialFeaturesRequest) Reset() {
	*x = PolynomialFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polynomial_features_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolynomialFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolynomialFeaturesRequest) ProtoMessage() {}

func (x *PolynomialFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polynomial_features_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolynomialFeaturesRequest.ProtoReflect.Descriptor instead.
func (*PolynomialFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_polynomial_features_proto_rawDescGZIP(), []int{1}
}

func (x *PolynomialFeaturesRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *PolynomialFeaturesRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *PolynomialFeaturesRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *PolynomialFeaturesRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PolynomialFeaturesRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *PolynomialFeaturesRequest) GetDegree() *anypb.Any {
	if x != nil {
		return x.Degree
	}
	return nil
}

func (m *PolynomialFeaturesRequest) GetInstrument() isPolynomialFeaturesRequest_Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (x *PolynomialFeaturesRequest) GetInteractionOnly() bool {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesRequest_InteractionOnly); ok {
		return x.InteractionOnly
	}
	return false
}

func (x *PolynomialFeaturesRequest) GetIncludeBias() bool {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesRequest_IncludeBias); ok {
		return x.IncludeBias
	}
	return false
}

func (x *PolynomialFeaturesRequest) GetOrder() Order {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesRequest_Order); ok {
		return x.Order
	}
	return Order_ORDER_C
}

func (x *PolynomialFeaturesRequest) GetKwargs() *anypb.Any {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesRequest_Kwargs); ok {
		return x.Kwargs
	}
	return nil
}

type isPolynomialFeaturesRequest_Instrument interface {
	isPolynomialFeaturesRequest_Instrument()
}

type PolynomialFeaturesRequest_InteractionOnly struct {
	InteractionOnly bool `protobuf:"varint,7,opt,name=interaction_only,json=interactionOnly,proto3,oneof"`
}

type PolynomialFeaturesRequest_IncludeBias struct {
	IncludeBias bool `protobuf:"varint,8,opt,name=include_bias,json=includeBias,proto3,oneof"`
}

type PolynomialFeaturesRequest_Order struct {
	Order Order `protobuf:"varint,9,opt,name=order,proto3,enum=AIProto.Order,oneof"`
}

type PolynomialFeaturesRequest_Kwargs struct {
	Kwargs *anypb.Any `protobuf:"bytes,10,opt,name=kwargs,proto3,oneof"`
}

func (*PolynomialFeaturesRequest_InteractionOnly) isPolynomialFeaturesRequest_Instrument() {}

func (*PolynomialFeaturesRequest_IncludeBias) isPolynomialFeaturesRequest_Instrument() {}

func (*PolynomialFeaturesRequest_Order) isPolynomialFeaturesRequest_Instrument() {}

func (*PolynomialFeaturesRequest_Kwargs) isPolynomialFeaturesRequest_Instrument() {}

// The response message containing the Polynomial Features.
type PolynomialFeaturesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix *anypb.Any `protobuf:"bytes,1,opt,name=matrix,proto3,oneof" json:"matrix,omitempty"`
}

func (x *PolynomialFeaturesReply) Reset() {
	*x = PolynomialFeaturesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polynomial_features_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolynomialFeaturesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolynomialFeaturesReply) ProtoMessage() {}

func (x *PolynomialFeaturesReply) ProtoReflect() protoreflect.Message {
	mi := &file_polynomial_features_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolynomialFeaturesReply.ProtoReflect.Descriptor instead.
func (*PolynomialFeaturesReply) Descriptor() ([]byte, []int) {
	return file_polynomial_features_proto_rawDescGZIP(), []int{2}
}

func (x *PolynomialFeaturesReply) GetMatrix() *anypb.Any {
	if x != nil {
		return x.Matrix
	}
	return nil
}

// The request message containing the Polynomial Features with Transform's Data.
type PolynomialFeaturesFitTransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XDropData    *anypb.Any `protobuf:"bytes,1,opt,name=x_drop_data,json=xDropData,proto3" json:"x_drop_data,omitempty"`
	Size         *anypb.Any `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Random       *anypb.Any `protobuf:"bytes,3,opt,name=random,proto3" json:"random,omitempty"`
	Key          string     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	YDropData    *anypb.Any `protobuf:"bytes,5,opt,name=y_drop_data,json=yDropData,proto3,oneof" json:"y_drop_data,omitempty"`
	SampleWeight *anypb.Any `protobuf:"bytes,6,opt,name=sample_weight,json=sampleWeight,proto3,oneof" json:"sample_weight,omitempty"`
	Degree       *int32     `protobuf:"varint,7,opt,name=degree,proto3,oneof" json:"degree,omitempty"`
	// Types that are assignable to Instrument:
	//	*PolynomialFeaturesFitTransformRequest_InteractionOnly
	//	*PolynomialFeaturesFitTransformRequest_IncludeBias
	//	*PolynomialFeaturesFitTransformRequest_Order
	//	*PolynomialFeaturesFitTransformRequest_CoefInit
	//	*PolynomialFeaturesFitTransformRequest_InterceptInit
	//	*PolynomialFeaturesFitTransformRequest_Kwargs
	Instrument isPolynomialFeaturesFitTransformRequest_Instrument `protobuf_oneof:"instrument"`
}

func (x *PolynomialFeaturesFitTransformRequest) Reset() {
	*x = PolynomialFeaturesFitTransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polynomial_features_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolynomialFeaturesFitTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolynomialFeaturesFitTransformRequest) ProtoMessage() {}

func (x *PolynomialFeaturesFitTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polynomial_features_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolynomialFeaturesFitTransformRequest.ProtoReflect.Descriptor instead.
func (*PolynomialFeaturesFitTransformRequest) Descriptor() ([]byte, []int) {
	return file_polynomial_features_proto_rawDescGZIP(), []int{3}
}

func (x *PolynomialFeaturesFitTransformRequest) GetXDropData() *anypb.Any {
	if x != nil {
		return x.XDropData
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetSize() *anypb.Any {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetRandom() *anypb.Any {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PolynomialFeaturesFitTransformRequest) GetYDropData() *anypb.Any {
	if x != nil {
		return x.YDropData
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetSampleWeight() *anypb.Any {
	if x != nil {
		return x.SampleWeight
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetDegree() int32 {
	if x != nil && x.Degree != nil {
		return *x.Degree
	}
	return 0
}

func (m *PolynomialFeaturesFitTransformRequest) GetInstrument() isPolynomialFeaturesFitTransformRequest_Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetInteractionOnly() bool {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesFitTransformRequest_InteractionOnly); ok {
		return x.InteractionOnly
	}
	return false
}

func (x *PolynomialFeaturesFitTransformRequest) GetIncludeBias() bool {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesFitTransformRequest_IncludeBias); ok {
		return x.IncludeBias
	}
	return false
}

func (x *PolynomialFeaturesFitTransformRequest) GetOrder() Order {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesFitTransformRequest_Order); ok {
		return x.Order
	}
	return Order_ORDER_C
}

func (x *PolynomialFeaturesFitTransformRequest) GetCoefInit() *anypb.Any {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesFitTransformRequest_CoefInit); ok {
		return x.CoefInit
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetInterceptInit() *anypb.Any {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesFitTransformRequest_InterceptInit); ok {
		return x.InterceptInit
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformRequest) GetKwargs() *PolynomialFeaturesFitTransformkwargs {
	if x, ok := x.GetInstrument().(*PolynomialFeaturesFitTransformRequest_Kwargs); ok {
		return x.Kwargs
	}
	return nil
}

type isPolynomialFeaturesFitTransformRequest_Instrument interface {
	isPolynomialFeaturesFitTransformRequest_Instrument()
}

type PolynomialFeaturesFitTransformRequest_InteractionOnly struct {
	InteractionOnly bool `protobuf:"varint,8,opt,name=interaction_only,json=interactionOnly,proto3,oneof"`
}

type PolynomialFeaturesFitTransformRequest_IncludeBias struct {
	IncludeBias bool `protobuf:"varint,9,opt,name=include_bias,json=includeBias,proto3,oneof"`
}

type PolynomialFeaturesFitTransformRequest_Order struct {
	Order Order `protobuf:"varint,10,opt,name=order,proto3,enum=AIProto.Order,oneof"`
}

type PolynomialFeaturesFitTransformRequest_CoefInit struct {
	CoefInit *anypb.Any `protobuf:"bytes,11,opt,name=coef_init,json=coefInit,proto3,oneof"`
}

type PolynomialFeaturesFitTransformRequest_InterceptInit struct {
	InterceptInit *anypb.Any `protobuf:"bytes,12,opt,name=intercept_init,json=interceptInit,proto3,oneof"`
}

type PolynomialFeaturesFitTransformRequest_Kwargs struct {
	Kwargs *PolynomialFeaturesFitTransformkwargs `protobuf:"bytes,13,opt,name=kwargs,proto3,oneof"`
}

func (*PolynomialFeaturesFitTransformRequest_InteractionOnly) isPolynomialFeaturesFitTransformRequest_Instrument() {
}

func (*PolynomialFeaturesFitTransformRequest_IncludeBias) isPolynomialFeaturesFitTransformRequest_Instrument() {
}

func (*PolynomialFeaturesFitTransformRequest_Order) isPolynomialFeaturesFitTransformRequest_Instrument() {
}

func (*PolynomialFeaturesFitTransformRequest_CoefInit) isPolynomialFeaturesFitTransformRequest_Instrument() {
}

func (*PolynomialFeaturesFitTransformRequest_InterceptInit) isPolynomialFeaturesFitTransformRequest_Instrument() {
}

func (*PolynomialFeaturesFitTransformRequest_Kwargs) isPolynomialFeaturesFitTransformRequest_Instrument() {
}

// The response message containing the Polynomial Features with Transform.
type PolynomialFeaturesFitTransformReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T_              *int32     `protobuf:"varint,1,opt,name=t_,json=t,proto3,oneof" json:"t_,omitempty"`
	NIter_          *int32     `protobuf:"varint,2,opt,name=n_iter_,json=nIter,proto3,oneof" json:"n_iter_,omitempty"`
	FeatureNamesIn_ *NDArray   `protobuf:"bytes,3,opt,name=feature_names_in_,json=featureNamesIn,proto3,oneof" json:"feature_names_in_,omitempty"`
	NFeaturesIn_    *int32     `protobuf:"varint,4,opt,name=n_features_in_,json=nFeaturesIn,proto3,oneof" json:"n_features_in_,omitempty"`
	LossFunction_   *anypb.Any `protobuf:"bytes,5,opt,name=loss_function_,json=lossFunction,proto3,oneof" json:"loss_function_,omitempty"`
	Intercept_      *NDArray   `protobuf:"bytes,6,opt,name=intercept_,json=intercept,proto3,oneof" json:"intercept_,omitempty"`
	Coef_           *NDArray   `protobuf:"bytes,7,opt,name=coef_,json=coef,proto3,oneof" json:"coef_,omitempty"`
	Classes_        *NDArray   `protobuf:"bytes,8,opt,name=classes_,json=classes,proto3,oneof" json:"classes_,omitempty"`
}

func (x *PolynomialFeaturesFitTransformReply) Reset() {
	*x = PolynomialFeaturesFitTransformReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polynomial_features_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolynomialFeaturesFitTransformReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolynomialFeaturesFitTransformReply) ProtoMessage() {}

func (x *PolynomialFeaturesFitTransformReply) ProtoReflect() protoreflect.Message {
	mi := &file_polynomial_features_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolynomialFeaturesFitTransformReply.ProtoReflect.Descriptor instead.
func (*PolynomialFeaturesFitTransformReply) Descriptor() ([]byte, []int) {
	return file_polynomial_features_proto_rawDescGZIP(), []int{4}
}

func (x *PolynomialFeaturesFitTransformReply) GetT_() int32 {
	if x != nil && x.T_ != nil {
		return *x.T_
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformReply) GetNIter_() int32 {
	if x != nil && x.NIter_ != nil {
		return *x.NIter_
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformReply) GetFeatureNamesIn_() *NDArray {
	if x != nil {
		return x.FeatureNamesIn_
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformReply) GetNFeaturesIn_() int32 {
	if x != nil && x.NFeaturesIn_ != nil {
		return *x.NFeaturesIn_
	}
	return 0
}

func (x *PolynomialFeaturesFitTransformReply) GetLossFunction_() *anypb.Any {
	if x != nil {
		return x.LossFunction_
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformReply) GetIntercept_() *NDArray {
	if x != nil {
		return x.Intercept_
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformReply) GetCoef_() *NDArray {
	if x != nil {
		return x.Coef_
	}
	return nil
}

func (x *PolynomialFeaturesFitTransformReply) GetClasses_() *NDArray {
	if x != nil {
		return x.Classes_
	}
	return nil
}

var File_polynomial_features_proto protoreflect.FileDescriptor

var file_polynomial_features_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x41, 0x49, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x69, 0x62, 0x2f, 0x6e, 0x70, 0x5f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x69, 0x62, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa9, 0x07, 0x0a, 0x24, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x31, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x07, 0x6c, 0x31, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0c,
	0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x03, 0x74, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74,
	0x61, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x04, 0x65, 0x74, 0x61, 0x30,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x09, 0x52, 0x05, 0x6e, 0x4a, 0x6f,
	0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x0a, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0d, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0c, 0x52, 0x12,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0d, 0x52, 0x0d, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x0e, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x31, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x6c, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x74, 0x61, 0x30,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xfc, 0x03, 0x0a,
	0x19, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x78, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x79, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x09, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x06, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x41, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x22, 0x57, 0x0a, 0x17, 0x50,
	0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x22, 0xd1, 0x05, 0x0a, 0x25, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d,
	0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x78, 0x44, 0x72, 0x6f, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x01, 0x52, 0x09, 0x79, 0x44, 0x72,
	0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x64, 0x65, 0x67,
	0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62,
	0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x65,
	0x66, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x46, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x22, 0x8c, 0x04, 0x0a, 0x23, 0x50, 0x6f, 0x6c,
	0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x02, 0x74, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x01,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x07, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x02,
	0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x6e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x04, 0x52, 0x0c, 0x6c,
	0x6f, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x06, 0x52, 0x04, 0x63, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x44, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x07, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x5f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x5f,
	0x69, 0x74, 0x65, 0x72, 0x5f, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x5f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x32, 0x96, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x79,
	0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a,
	0x17, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x50, 0x6f, 0x6c,
	0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6e,
	0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6e,
	0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_polynomial_features_proto_rawDescOnce sync.Once
	file_polynomial_features_proto_rawDescData = file_polynomial_features_proto_rawDesc
)

func file_polynomial_features_proto_rawDescGZIP() []byte {
	file_polynomial_features_proto_rawDescOnce.Do(func() {
		file_polynomial_features_proto_rawDescData = protoimpl.X.CompressGZIP(file_polynomial_features_proto_rawDescData)
	})
	return file_polynomial_features_proto_rawDescData
}

var file_polynomial_features_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_polynomial_features_proto_goTypes = []interface{}{
	(*PolynomialFeaturesFitTransformkwargs)(nil),  // 0: AIProto.PolynomialFeaturesFitTransformkwargs
	(*PolynomialFeaturesRequest)(nil),             // 1: AIProto.PolynomialFeaturesRequest
	(*PolynomialFeaturesReply)(nil),               // 2: AIProto.PolynomialFeaturesReply
	(*PolynomialFeaturesFitTransformRequest)(nil), // 3: AIProto.PolynomialFeaturesFitTransformRequest
	(*PolynomialFeaturesFitTransformReply)(nil),   // 4: AIProto.PolynomialFeaturesFitTransformReply
	(Penalty)(0),      // 5: AIProto.Penalty
	(*anypb.Any)(nil), // 6: google.protobuf.Any
	(Order)(0),        // 7: AIProto.Order
	(*NDArray)(nil),   // 8: AIProto.NDArray
}
var file_polynomial_features_proto_depIdxs = []int32{
	5,  // 0: AIProto.PolynomialFeaturesFitTransformkwargs.penalty:type_name -> AIProto.Penalty
	6,  // 1: AIProto.PolynomialFeaturesFitTransformkwargs.tol:type_name -> google.protobuf.Any
	6,  // 2: AIProto.PolynomialFeaturesFitTransformkwargs.n_jobs:type_name -> google.protobuf.Any
	6,  // 3: AIProto.PolynomialFeaturesFitTransformkwargs.random_state:type_name -> google.protobuf.Any
	6,  // 4: AIProto.PolynomialFeaturesFitTransformkwargs.class_weight:type_name -> google.protobuf.Any
	6,  // 5: AIProto.PolynomialFeaturesRequest.x_drop_data:type_name -> google.protobuf.Any
	6,  // 6: AIProto.PolynomialFeaturesRequest.size:type_name -> google.protobuf.Any
	6,  // 7: AIProto.PolynomialFeaturesRequest.random:type_name -> google.protobuf.Any
	6,  // 8: AIProto.PolynomialFeaturesRequest.y_drop_data:type_name -> google.protobuf.Any
	6,  // 9: AIProto.PolynomialFeaturesRequest.degree:type_name -> google.protobuf.Any
	7,  // 10: AIProto.PolynomialFeaturesRequest.order:type_name -> AIProto.Order
	6,  // 11: AIProto.PolynomialFeaturesRequest.kwargs:type_name -> google.protobuf.Any
	6,  // 12: AIProto.PolynomialFeaturesReply.matrix:type_name -> google.protobuf.Any
	6,  // 13: AIProto.PolynomialFeaturesFitTransformRequest.x_drop_data:type_name -> google.protobuf.Any
	6,  // 14: AIProto.PolynomialFeaturesFitTransformRequest.size:type_name -> google.protobuf.Any
	6,  // 15: AIProto.PolynomialFeaturesFitTransformRequest.random:type_name -> google.protobuf.Any
	6,  // 16: AIProto.PolynomialFeaturesFitTransformRequest.y_drop_data:type_name -> google.protobuf.Any
	6,  // 17: AIProto.PolynomialFeaturesFitTransformRequest.sample_weight:type_name -> google.protobuf.Any
	7,  // 18: AIProto.PolynomialFeaturesFitTransformRequest.order:type_name -> AIProto.Order
	6,  // 19: AIProto.PolynomialFeaturesFitTransformRequest.coef_init:type_name -> google.protobuf.Any
	6,  // 20: AIProto.PolynomialFeaturesFitTransformRequest.intercept_init:type_name -> google.protobuf.Any
	0,  // 21: AIProto.PolynomialFeaturesFitTransformRequest.kwargs:type_name -> AIProto.PolynomialFeaturesFitTransformkwargs
	8,  // 22: AIProto.PolynomialFeaturesFitTransformReply.feature_names_in_:type_name -> AIProto.NDArray
	6,  // 23: AIProto.PolynomialFeaturesFitTransformReply.loss_function_:type_name -> google.protobuf.Any
	8,  // 24: AIProto.PolynomialFeaturesFitTransformReply.intercept_:type_name -> AIProto.NDArray
	8,  // 25: AIProto.PolynomialFeaturesFitTransformReply.coef_:type_name -> AIProto.NDArray
	8,  // 26: AIProto.PolynomialFeaturesFitTransformReply.classes_:type_name -> AIProto.NDArray
	3,  // 27: AIProto.PolynomialService.PolynomialFeaturesEvent:input_type -> AIProto.PolynomialFeaturesFitTransformRequest
	3,  // 28: AIProto.PolynomialService.PolynomialFeaturesFitTransformEvent:input_type -> AIProto.PolynomialFeaturesFitTransformRequest
	4,  // 29: AIProto.PolynomialService.PolynomialFeaturesEvent:output_type -> AIProto.PolynomialFeaturesFitTransformReply
	4,  // 30: AIProto.PolynomialService.PolynomialFeaturesFitTransformEvent:output_type -> AIProto.PolynomialFeaturesFitTransformReply
	29, // [29:31] is the sub-list for method output_type
	27, // [27:29] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_polynomial_features_proto_init() }
func file_polynomial_features_proto_init() {
	if File_polynomial_features_proto != nil {
		return
	}
	file_lib_np_library_proto_init()
	file_lib_enum_expression_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_polynomial_features_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolynomialFeaturesFitTransformkwargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polynomial_features_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolynomialFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polynomial_features_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolynomialFeaturesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polynomial_features_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolynomialFeaturesFitTransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polynomial_features_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolynomialFeaturesFitTransformReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_polynomial_features_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_polynomial_features_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PolynomialFeaturesRequest_InteractionOnly)(nil),
		(*PolynomialFeaturesRequest_IncludeBias)(nil),
		(*PolynomialFeaturesRequest_Order)(nil),
		(*PolynomialFeaturesRequest_Kwargs)(nil),
	}
	file_polynomial_features_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_polynomial_features_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PolynomialFeaturesFitTransformRequest_InteractionOnly)(nil),
		(*PolynomialFeaturesFitTransformRequest_IncludeBias)(nil),
		(*PolynomialFeaturesFitTransformRequest_Order)(nil),
		(*PolynomialFeaturesFitTransformRequest_CoefInit)(nil),
		(*PolynomialFeaturesFitTransformRequest_InterceptInit)(nil),
		(*PolynomialFeaturesFitTransformRequest_Kwargs)(nil),
	}
	file_polynomial_features_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_polynomial_features_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_polynomial_features_proto_goTypes,
		DependencyIndexes: file_polynomial_features_proto_depIdxs,
		MessageInfos:      file_polynomial_features_proto_msgTypes,
	}.Build()
	File_polynomial_features_proto = out.File
	file_polynomial_features_proto_rawDesc = nil
	file_polynomial_features_proto_goTypes = nil
	file_polynomial_features_proto_depIdxs = nil
}
